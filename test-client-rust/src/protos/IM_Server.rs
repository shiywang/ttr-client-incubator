// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `IM.Server.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMStopReceivePacket {
    // message fields
    result: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMStopReceivePacket {
    fn default() -> &'a IMStopReceivePacket {
        <IMStopReceivePacket as ::protobuf::Message>::default_instance()
    }
}

impl IMStopReceivePacket {
    pub fn new() -> IMStopReceivePacket {
        ::std::default::Default::default()
    }

    // required uint32 result = 1;


    pub fn get_result(&self) -> u32 {
        self.result.unwrap_or(0)
    }
    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: u32) {
        self.result = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMStopReceivePacket {
    fn is_initialized(&self) -> bool {
        if self.result.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.result {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMStopReceivePacket {
        IMStopReceivePacket::new()
    }

    fn default_instance() -> &'static IMStopReceivePacket {
        static mut instance: ::protobuf::lazy::Lazy<IMStopReceivePacket> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMStopReceivePacket,
        };
        unsafe {
            instance.get(IMStopReceivePacket::new)
        }
    }
}

impl ::protobuf::Clear for IMStopReceivePacket {
    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMStopReceivePacket {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMValidateReq {
    // message fields
    user_name: ::protobuf::SingularField<::std::string::String>,
    password: ::protobuf::SingularField<::std::string::String>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMValidateReq {
    fn default() -> &'a IMValidateReq {
        <IMValidateReq as ::protobuf::Message>::default_instance()
    }
}

impl IMValidateReq {
    pub fn new() -> IMValidateReq {
        ::std::default::Default::default()
    }

    // required string user_name = 1;


    pub fn get_user_name(&self) -> &str {
        match self.user_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_user_name(&mut self) {
        self.user_name.clear();
    }

    pub fn has_user_name(&self) -> bool {
        self.user_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_name(&mut self, v: ::std::string::String) {
        self.user_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_name(&mut self) -> &mut ::std::string::String {
        if self.user_name.is_none() {
            self.user_name.set_default();
        }
        self.user_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_name(&mut self) -> ::std::string::String {
        self.user_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string password = 2;


    pub fn get_password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password.set_default();
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMValidateReq {
    fn is_initialized(&self) -> bool {
        if self.user_name.is_none() {
            return false;
        }
        if self.password.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.user_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.password)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.password.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMValidateReq {
        IMValidateReq::new()
    }

    fn default_instance() -> &'static IMValidateReq {
        static mut instance: ::protobuf::lazy::Lazy<IMValidateReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMValidateReq,
        };
        unsafe {
            instance.get(IMValidateReq::new)
        }
    }
}

impl ::protobuf::Clear for IMValidateReq {
    fn clear(&mut self) {
        self.user_name.clear();
        self.password.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMValidateReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMValidateRsp {
    // message fields
    user_name: ::protobuf::SingularField<::std::string::String>,
    result_code: ::std::option::Option<u32>,
    result_string: ::protobuf::SingularField<::std::string::String>,
    user_info: ::protobuf::SingularPtrField<super::IM_BaseDefine::UserInfo>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMValidateRsp {
    fn default() -> &'a IMValidateRsp {
        <IMValidateRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMValidateRsp {
    pub fn new() -> IMValidateRsp {
        ::std::default::Default::default()
    }

    // required string user_name = 1;


    pub fn get_user_name(&self) -> &str {
        match self.user_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_user_name(&mut self) {
        self.user_name.clear();
    }

    pub fn has_user_name(&self) -> bool {
        self.user_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_name(&mut self, v: ::std::string::String) {
        self.user_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_name(&mut self) -> &mut ::std::string::String {
        if self.user_name.is_none() {
            self.user_name.set_default();
        }
        self.user_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_name(&mut self) -> ::std::string::String {
        self.user_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 result_code = 2;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // optional string result_string = 3;


    pub fn get_result_string(&self) -> &str {
        match self.result_string.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_result_string(&mut self) {
        self.result_string.clear();
    }

    pub fn has_result_string(&self) -> bool {
        self.result_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_string(&mut self, v: ::std::string::String) {
        self.result_string = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_string(&mut self) -> &mut ::std::string::String {
        if self.result_string.is_none() {
            self.result_string.set_default();
        }
        self.result_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_result_string(&mut self) -> ::std::string::String {
        self.result_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .IM.BaseDefine.UserInfo user_info = 4;


    pub fn get_user_info(&self) -> &super::IM_BaseDefine::UserInfo {
        self.user_info.as_ref().unwrap_or_else(|| super::IM_BaseDefine::UserInfo::default_instance())
    }
    pub fn clear_user_info(&mut self) {
        self.user_info.clear();
    }

    pub fn has_user_info(&self) -> bool {
        self.user_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_info(&mut self, v: super::IM_BaseDefine::UserInfo) {
        self.user_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_info(&mut self) -> &mut super::IM_BaseDefine::UserInfo {
        if self.user_info.is_none() {
            self.user_info.set_default();
        }
        self.user_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_info(&mut self) -> super::IM_BaseDefine::UserInfo {
        self.user_info.take().unwrap_or_else(|| super::IM_BaseDefine::UserInfo::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMValidateRsp {
    fn is_initialized(&self) -> bool {
        if self.user_name.is_none() {
            return false;
        }
        if self.result_code.is_none() {
            return false;
        }
        for v in &self.user_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.user_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.result_string)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user_info)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.result_string.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.user_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.result_code {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.result_string.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.user_info.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMValidateRsp {
        IMValidateRsp::new()
    }

    fn default_instance() -> &'static IMValidateRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMValidateRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMValidateRsp,
        };
        unsafe {
            instance.get(IMValidateRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMValidateRsp {
    fn clear(&mut self) {
        self.user_name.clear();
        self.result_code = ::std::option::Option::None;
        self.result_string.clear();
        self.user_info.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMValidateRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGetDeviceTokenReq {
    // message fields
    user_id: ::std::vec::Vec<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGetDeviceTokenReq {
    fn default() -> &'a IMGetDeviceTokenReq {
        <IMGetDeviceTokenReq as ::protobuf::Message>::default_instance()
    }
}

impl IMGetDeviceTokenReq {
    pub fn new() -> IMGetDeviceTokenReq {
        ::std::default::Default::default()
    }

    // repeated uint32 user_id = 1;


    pub fn get_user_id(&self) -> &[u32] {
        &self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: ::std::vec::Vec<u32>) {
        self.user_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_id(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.user_id
    }

    // Take field
    pub fn take_user_id(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.user_id, ::std::vec::Vec::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGetDeviceTokenReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.user_id)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.user_id {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.user_id {
            os.write_uint32(1, *v)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGetDeviceTokenReq {
        IMGetDeviceTokenReq::new()
    }

    fn default_instance() -> &'static IMGetDeviceTokenReq {
        static mut instance: ::protobuf::lazy::Lazy<IMGetDeviceTokenReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGetDeviceTokenReq,
        };
        unsafe {
            instance.get(IMGetDeviceTokenReq::new)
        }
    }
}

impl ::protobuf::Clear for IMGetDeviceTokenReq {
    fn clear(&mut self) {
        self.user_id.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGetDeviceTokenReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGetDeviceTokenRsp {
    // message fields
    user_token_info: ::protobuf::RepeatedField<super::IM_BaseDefine::UserTokenInfo>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGetDeviceTokenRsp {
    fn default() -> &'a IMGetDeviceTokenRsp {
        <IMGetDeviceTokenRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMGetDeviceTokenRsp {
    pub fn new() -> IMGetDeviceTokenRsp {
        ::std::default::Default::default()
    }

    // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;


    pub fn get_user_token_info(&self) -> &[super::IM_BaseDefine::UserTokenInfo] {
        &self.user_token_info
    }
    pub fn clear_user_token_info(&mut self) {
        self.user_token_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_token_info(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::UserTokenInfo>) {
        self.user_token_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_token_info(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::UserTokenInfo> {
        &mut self.user_token_info
    }

    // Take field
    pub fn take_user_token_info(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::UserTokenInfo> {
        ::std::mem::replace(&mut self.user_token_info, ::protobuf::RepeatedField::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGetDeviceTokenRsp {
    fn is_initialized(&self) -> bool {
        for v in &self.user_token_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.user_token_info)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.user_token_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.user_token_info {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGetDeviceTokenRsp {
        IMGetDeviceTokenRsp::new()
    }

    fn default_instance() -> &'static IMGetDeviceTokenRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMGetDeviceTokenRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGetDeviceTokenRsp,
        };
        unsafe {
            instance.get(IMGetDeviceTokenRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMGetDeviceTokenRsp {
    fn clear(&mut self) {
        self.user_token_info.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGetDeviceTokenRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMRoleSet {
    // message fields
    master: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMRoleSet {
    fn default() -> &'a IMRoleSet {
        <IMRoleSet as ::protobuf::Message>::default_instance()
    }
}

impl IMRoleSet {
    pub fn new() -> IMRoleSet {
        ::std::default::Default::default()
    }

    // required uint32 master = 1;


    pub fn get_master(&self) -> u32 {
        self.master.unwrap_or(0)
    }
    pub fn clear_master(&mut self) {
        self.master = ::std::option::Option::None;
    }

    pub fn has_master(&self) -> bool {
        self.master.is_some()
    }

    // Param is passed by value, moved
    pub fn set_master(&mut self, v: u32) {
        self.master = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMRoleSet {
    fn is_initialized(&self) -> bool {
        if self.master.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.master = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.master {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.master {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMRoleSet {
        IMRoleSet::new()
    }

    fn default_instance() -> &'static IMRoleSet {
        static mut instance: ::protobuf::lazy::Lazy<IMRoleSet> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMRoleSet,
        };
        unsafe {
            instance.get(IMRoleSet::new)
        }
    }
}

impl ::protobuf::Clear for IMRoleSet {
    fn clear(&mut self) {
        self.master = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMRoleSet {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMOnlineUserInfo {
    // message fields
    user_stat_list: ::protobuf::RepeatedField<super::IM_BaseDefine::ServerUserStat>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMOnlineUserInfo {
    fn default() -> &'a IMOnlineUserInfo {
        <IMOnlineUserInfo as ::protobuf::Message>::default_instance()
    }
}

impl IMOnlineUserInfo {
    pub fn new() -> IMOnlineUserInfo {
        ::std::default::Default::default()
    }

    // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;


    pub fn get_user_stat_list(&self) -> &[super::IM_BaseDefine::ServerUserStat] {
        &self.user_stat_list
    }
    pub fn clear_user_stat_list(&mut self) {
        self.user_stat_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_stat_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::ServerUserStat>) {
        self.user_stat_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_stat_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::ServerUserStat> {
        &mut self.user_stat_list
    }

    // Take field
    pub fn take_user_stat_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::ServerUserStat> {
        ::std::mem::replace(&mut self.user_stat_list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for IMOnlineUserInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.user_stat_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.user_stat_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.user_stat_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.user_stat_list {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMOnlineUserInfo {
        IMOnlineUserInfo::new()
    }

    fn default_instance() -> &'static IMOnlineUserInfo {
        static mut instance: ::protobuf::lazy::Lazy<IMOnlineUserInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMOnlineUserInfo,
        };
        unsafe {
            instance.get(IMOnlineUserInfo::new)
        }
    }
}

impl ::protobuf::Clear for IMOnlineUserInfo {
    fn clear(&mut self) {
        self.user_stat_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMOnlineUserInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMMsgServInfo {
    // message fields
    ip1: ::protobuf::SingularField<::std::string::String>,
    ip2: ::protobuf::SingularField<::std::string::String>,
    port: ::std::option::Option<u32>,
    max_conn_cnt: ::std::option::Option<u32>,
    cur_conn_cnt: ::std::option::Option<u32>,
    host_name: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMMsgServInfo {
    fn default() -> &'a IMMsgServInfo {
        <IMMsgServInfo as ::protobuf::Message>::default_instance()
    }
}

impl IMMsgServInfo {
    pub fn new() -> IMMsgServInfo {
        ::std::default::Default::default()
    }

    // required string ip1 = 1;


    pub fn get_ip1(&self) -> &str {
        match self.ip1.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ip1(&mut self) {
        self.ip1.clear();
    }

    pub fn has_ip1(&self) -> bool {
        self.ip1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip1(&mut self, v: ::std::string::String) {
        self.ip1 = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip1(&mut self) -> &mut ::std::string::String {
        if self.ip1.is_none() {
            self.ip1.set_default();
        }
        self.ip1.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip1(&mut self) -> ::std::string::String {
        self.ip1.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string ip2 = 2;


    pub fn get_ip2(&self) -> &str {
        match self.ip2.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_ip2(&mut self) {
        self.ip2.clear();
    }

    pub fn has_ip2(&self) -> bool {
        self.ip2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ip2(&mut self, v: ::std::string::String) {
        self.ip2 = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip2(&mut self) -> &mut ::std::string::String {
        if self.ip2.is_none() {
            self.ip2.set_default();
        }
        self.ip2.as_mut().unwrap()
    }

    // Take field
    pub fn take_ip2(&mut self) -> ::std::string::String {
        self.ip2.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 port = 3;


    pub fn get_port(&self) -> u32 {
        self.port.unwrap_or(0)
    }
    pub fn clear_port(&mut self) {
        self.port = ::std::option::Option::None;
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = ::std::option::Option::Some(v);
    }

    // required uint32 max_conn_cnt = 4;


    pub fn get_max_conn_cnt(&self) -> u32 {
        self.max_conn_cnt.unwrap_or(0)
    }
    pub fn clear_max_conn_cnt(&mut self) {
        self.max_conn_cnt = ::std::option::Option::None;
    }

    pub fn has_max_conn_cnt(&self) -> bool {
        self.max_conn_cnt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_conn_cnt(&mut self, v: u32) {
        self.max_conn_cnt = ::std::option::Option::Some(v);
    }

    // required uint32 cur_conn_cnt = 5;


    pub fn get_cur_conn_cnt(&self) -> u32 {
        self.cur_conn_cnt.unwrap_or(0)
    }
    pub fn clear_cur_conn_cnt(&mut self) {
        self.cur_conn_cnt = ::std::option::Option::None;
    }

    pub fn has_cur_conn_cnt(&self) -> bool {
        self.cur_conn_cnt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cur_conn_cnt(&mut self, v: u32) {
        self.cur_conn_cnt = ::std::option::Option::Some(v);
    }

    // required string host_name = 6;


    pub fn get_host_name(&self) -> &str {
        match self.host_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_host_name(&mut self) {
        self.host_name.clear();
    }

    pub fn has_host_name(&self) -> bool {
        self.host_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_name(&mut self, v: ::std::string::String) {
        self.host_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_name(&mut self) -> &mut ::std::string::String {
        if self.host_name.is_none() {
            self.host_name.set_default();
        }
        self.host_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_host_name(&mut self) -> ::std::string::String {
        self.host_name.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for IMMsgServInfo {
    fn is_initialized(&self) -> bool {
        if self.ip1.is_none() {
            return false;
        }
        if self.ip2.is_none() {
            return false;
        }
        if self.port.is_none() {
            return false;
        }
        if self.max_conn_cnt.is_none() {
            return false;
        }
        if self.cur_conn_cnt.is_none() {
            return false;
        }
        if self.host_name.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ip1)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.ip2)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.max_conn_cnt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cur_conn_cnt = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.host_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ip1.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.ip2.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.port {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.max_conn_cnt {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.cur_conn_cnt {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.host_name.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ip1.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.ip2.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.port {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.max_conn_cnt {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.cur_conn_cnt {
            os.write_uint32(5, v)?;
        }
        if let Some(ref v) = self.host_name.as_ref() {
            os.write_string(6, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMMsgServInfo {
        IMMsgServInfo::new()
    }

    fn default_instance() -> &'static IMMsgServInfo {
        static mut instance: ::protobuf::lazy::Lazy<IMMsgServInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMMsgServInfo,
        };
        unsafe {
            instance.get(IMMsgServInfo::new)
        }
    }
}

impl ::protobuf::Clear for IMMsgServInfo {
    fn clear(&mut self) {
        self.ip1.clear();
        self.ip2.clear();
        self.port = ::std::option::Option::None;
        self.max_conn_cnt = ::std::option::Option::None;
        self.cur_conn_cnt = ::std::option::Option::None;
        self.host_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMMsgServInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMUserStatusUpdate {
    // message fields
    user_status: ::std::option::Option<u32>,
    user_id: ::std::option::Option<u32>,
    client_type: ::std::option::Option<super::IM_BaseDefine::ClientType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMUserStatusUpdate {
    fn default() -> &'a IMUserStatusUpdate {
        <IMUserStatusUpdate as ::protobuf::Message>::default_instance()
    }
}

impl IMUserStatusUpdate {
    pub fn new() -> IMUserStatusUpdate {
        ::std::default::Default::default()
    }

    // required uint32 user_status = 1;


    pub fn get_user_status(&self) -> u32 {
        self.user_status.unwrap_or(0)
    }
    pub fn clear_user_status(&mut self) {
        self.user_status = ::std::option::Option::None;
    }

    pub fn has_user_status(&self) -> bool {
        self.user_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_status(&mut self, v: u32) {
        self.user_status = ::std::option::Option::Some(v);
    }

    // required uint32 user_id = 2;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.ClientType client_type = 3;


    pub fn get_client_type(&self) -> super::IM_BaseDefine::ClientType {
        self.client_type.unwrap_or(super::IM_BaseDefine::ClientType::CLIENT_TYPE_WINDOWS)
    }
    pub fn clear_client_type(&mut self) {
        self.client_type = ::std::option::Option::None;
    }

    pub fn has_client_type(&self) -> bool {
        self.client_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: super::IM_BaseDefine::ClientType) {
        self.client_type = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMUserStatusUpdate {
    fn is_initialized(&self) -> bool {
        if self.user_status.is_none() {
            return false;
        }
        if self.user_id.is_none() {
            return false;
        }
        if self.client_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_status = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.client_type, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_status {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_type {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_status {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.user_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.client_type {
            os.write_enum(3, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMUserStatusUpdate {
        IMUserStatusUpdate::new()
    }

    fn default_instance() -> &'static IMUserStatusUpdate {
        static mut instance: ::protobuf::lazy::Lazy<IMUserStatusUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMUserStatusUpdate,
        };
        unsafe {
            instance.get(IMUserStatusUpdate::new)
        }
    }
}

impl ::protobuf::Clear for IMUserStatusUpdate {
    fn clear(&mut self) {
        self.user_status = ::std::option::Option::None;
        self.user_id = ::std::option::Option::None;
        self.client_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMUserStatusUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMUserCntUpdate {
    // message fields
    user_action: ::std::option::Option<u32>,
    user_id: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMUserCntUpdate {
    fn default() -> &'a IMUserCntUpdate {
        <IMUserCntUpdate as ::protobuf::Message>::default_instance()
    }
}

impl IMUserCntUpdate {
    pub fn new() -> IMUserCntUpdate {
        ::std::default::Default::default()
    }

    // required uint32 user_action = 1;


    pub fn get_user_action(&self) -> u32 {
        self.user_action.unwrap_or(0)
    }
    pub fn clear_user_action(&mut self) {
        self.user_action = ::std::option::Option::None;
    }

    pub fn has_user_action(&self) -> bool {
        self.user_action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_action(&mut self, v: u32) {
        self.user_action = ::std::option::Option::Some(v);
    }

    // required uint32 user_id = 2;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMUserCntUpdate {
    fn is_initialized(&self) -> bool {
        if self.user_action.is_none() {
            return false;
        }
        if self.user_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_action = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_action {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_action {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.user_id {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMUserCntUpdate {
        IMUserCntUpdate::new()
    }

    fn default_instance() -> &'static IMUserCntUpdate {
        static mut instance: ::protobuf::lazy::Lazy<IMUserCntUpdate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMUserCntUpdate,
        };
        unsafe {
            instance.get(IMUserCntUpdate::new)
        }
    }
}

impl ::protobuf::Clear for IMUserCntUpdate {
    fn clear(&mut self) {
        self.user_action = ::std::option::Option::None;
        self.user_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMUserCntUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMServerKickUser {
    // message fields
    user_id: ::std::option::Option<u32>,
    client_type: ::std::option::Option<super::IM_BaseDefine::ClientType>,
    reason: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMServerKickUser {
    fn default() -> &'a IMServerKickUser {
        <IMServerKickUser as ::protobuf::Message>::default_instance()
    }
}

impl IMServerKickUser {
    pub fn new() -> IMServerKickUser {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.ClientType client_type = 2;


    pub fn get_client_type(&self) -> super::IM_BaseDefine::ClientType {
        self.client_type.unwrap_or(super::IM_BaseDefine::ClientType::CLIENT_TYPE_WINDOWS)
    }
    pub fn clear_client_type(&mut self) {
        self.client_type = ::std::option::Option::None;
    }

    pub fn has_client_type(&self) -> bool {
        self.client_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: super::IM_BaseDefine::ClientType) {
        self.client_type = ::std::option::Option::Some(v);
    }

    // required uint32 reason = 3;


    pub fn get_reason(&self) -> u32 {
        self.reason.unwrap_or(0)
    }
    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: u32) {
        self.reason = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMServerKickUser {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.client_type.is_none() {
            return false;
        }
        if self.reason.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.client_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.reason = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.client_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.reason {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.client_type {
            os.write_enum(2, v.value())?;
        }
        if let Some(v) = self.reason {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMServerKickUser {
        IMServerKickUser::new()
    }

    fn default_instance() -> &'static IMServerKickUser {
        static mut instance: ::protobuf::lazy::Lazy<IMServerKickUser> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMServerKickUser,
        };
        unsafe {
            instance.get(IMServerKickUser::new)
        }
    }
}

impl ::protobuf::Clear for IMServerKickUser {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.client_type = ::std::option::Option::None;
        self.reason = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMServerKickUser {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMServerPCLoginStatusNotify {
    // message fields
    user_id: ::std::option::Option<u32>,
    login_status: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMServerPCLoginStatusNotify {
    fn default() -> &'a IMServerPCLoginStatusNotify {
        <IMServerPCLoginStatusNotify as ::protobuf::Message>::default_instance()
    }
}

impl IMServerPCLoginStatusNotify {
    pub fn new() -> IMServerPCLoginStatusNotify {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required uint32 login_status = 2;


    pub fn get_login_status(&self) -> u32 {
        self.login_status.unwrap_or(0)
    }
    pub fn clear_login_status(&mut self) {
        self.login_status = ::std::option::Option::None;
    }

    pub fn has_login_status(&self) -> bool {
        self.login_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_login_status(&mut self, v: u32) {
        self.login_status = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMServerPCLoginStatusNotify {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.login_status.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.login_status = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.login_status {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.login_status {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMServerPCLoginStatusNotify {
        IMServerPCLoginStatusNotify::new()
    }

    fn default_instance() -> &'static IMServerPCLoginStatusNotify {
        static mut instance: ::protobuf::lazy::Lazy<IMServerPCLoginStatusNotify> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMServerPCLoginStatusNotify,
        };
        unsafe {
            instance.get(IMServerPCLoginStatusNotify::new)
        }
    }
}

impl ::protobuf::Clear for IMServerPCLoginStatusNotify {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.login_status = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMServerPCLoginStatusNotify {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMPushToUserReq {
    // message fields
    flash: ::protobuf::SingularField<::std::string::String>,
    data: ::protobuf::SingularField<::std::string::String>,
    user_token_list: ::protobuf::RepeatedField<super::IM_BaseDefine::UserTokenInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMPushToUserReq {
    fn default() -> &'a IMPushToUserReq {
        <IMPushToUserReq as ::protobuf::Message>::default_instance()
    }
}

impl IMPushToUserReq {
    pub fn new() -> IMPushToUserReq {
        ::std::default::Default::default()
    }

    // required string flash = 1;


    pub fn get_flash(&self) -> &str {
        match self.flash.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_flash(&mut self) {
        self.flash.clear();
    }

    pub fn has_flash(&self) -> bool {
        self.flash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_flash(&mut self, v: ::std::string::String) {
        self.flash = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_flash(&mut self) -> &mut ::std::string::String {
        if self.flash.is_none() {
            self.flash.set_default();
        }
        self.flash.as_mut().unwrap()
    }

    // Take field
    pub fn take_flash(&mut self) -> ::std::string::String {
        self.flash.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string data = 2;


    pub fn get_data(&self) -> &str {
        match self.data.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        self.data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;


    pub fn get_user_token_list(&self) -> &[super::IM_BaseDefine::UserTokenInfo] {
        &self.user_token_list
    }
    pub fn clear_user_token_list(&mut self) {
        self.user_token_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_token_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::UserTokenInfo>) {
        self.user_token_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_token_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::UserTokenInfo> {
        &mut self.user_token_list
    }

    // Take field
    pub fn take_user_token_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::UserTokenInfo> {
        ::std::mem::replace(&mut self.user_token_list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for IMPushToUserReq {
    fn is_initialized(&self) -> bool {
        if self.flash.is_none() {
            return false;
        }
        if self.data.is_none() {
            return false;
        }
        for v in &self.user_token_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.flash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.data)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.user_token_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.flash.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.data.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.user_token_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.flash.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.data.as_ref() {
            os.write_string(2, &v)?;
        }
        for v in &self.user_token_list {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMPushToUserReq {
        IMPushToUserReq::new()
    }

    fn default_instance() -> &'static IMPushToUserReq {
        static mut instance: ::protobuf::lazy::Lazy<IMPushToUserReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMPushToUserReq,
        };
        unsafe {
            instance.get(IMPushToUserReq::new)
        }
    }
}

impl ::protobuf::Clear for IMPushToUserReq {
    fn clear(&mut self) {
        self.flash.clear();
        self.data.clear();
        self.user_token_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMPushToUserReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMPushToUserRsp {
    // message fields
    push_result_list: ::protobuf::RepeatedField<super::IM_BaseDefine::PushResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMPushToUserRsp {
    fn default() -> &'a IMPushToUserRsp {
        <IMPushToUserRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMPushToUserRsp {
    pub fn new() -> IMPushToUserRsp {
        ::std::default::Default::default()
    }

    // repeated .IM.BaseDefine.PushResult push_result_list = 1;


    pub fn get_push_result_list(&self) -> &[super::IM_BaseDefine::PushResult] {
        &self.push_result_list
    }
    pub fn clear_push_result_list(&mut self) {
        self.push_result_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_push_result_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::PushResult>) {
        self.push_result_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_push_result_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::PushResult> {
        &mut self.push_result_list
    }

    // Take field
    pub fn take_push_result_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::PushResult> {
        ::std::mem::replace(&mut self.push_result_list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for IMPushToUserRsp {
    fn is_initialized(&self) -> bool {
        for v in &self.push_result_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.push_result_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.push_result_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.push_result_list {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMPushToUserRsp {
        IMPushToUserRsp::new()
    }

    fn default_instance() -> &'static IMPushToUserRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMPushToUserRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMPushToUserRsp,
        };
        unsafe {
            instance.get(IMPushToUserRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMPushToUserRsp {
    fn clear(&mut self) {
        self.push_result_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMPushToUserRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupGetShieldReq {
    // message fields
    group_id: ::std::option::Option<u32>,
    user_id: ::std::vec::Vec<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupGetShieldReq {
    fn default() -> &'a IMGroupGetShieldReq {
        <IMGroupGetShieldReq as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupGetShieldReq {
    pub fn new() -> IMGroupGetShieldReq {
        ::std::default::Default::default()
    }

    // required uint32 group_id = 1;


    pub fn get_group_id(&self) -> u32 {
        self.group_id.unwrap_or(0)
    }
    pub fn clear_group_id(&mut self) {
        self.group_id = ::std::option::Option::None;
    }

    pub fn has_group_id(&self) -> bool {
        self.group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: u32) {
        self.group_id = ::std::option::Option::Some(v);
    }

    // repeated uint32 user_id = 2;


    pub fn get_user_id(&self) -> &[u32] {
        &self.user_id
    }
    pub fn clear_user_id(&mut self) {
        self.user_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: ::std::vec::Vec<u32>) {
        self.user_id = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_id(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.user_id
    }

    // Take field
    pub fn take_user_id(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.user_id, ::std::vec::Vec::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupGetShieldReq {
    fn is_initialized(&self) -> bool {
        if self.group_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.group_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.user_id)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.group_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.user_id {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.group_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.user_id {
            os.write_uint32(2, *v)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupGetShieldReq {
        IMGroupGetShieldReq::new()
    }

    fn default_instance() -> &'static IMGroupGetShieldReq {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupGetShieldReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupGetShieldReq,
        };
        unsafe {
            instance.get(IMGroupGetShieldReq::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupGetShieldReq {
    fn clear(&mut self) {
        self.group_id = ::std::option::Option::None;
        self.user_id.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupGetShieldReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupGetShieldRsp {
    // message fields
    group_id: ::std::option::Option<u32>,
    shield_status_list: ::protobuf::RepeatedField<super::IM_BaseDefine::ShieldStatus>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupGetShieldRsp {
    fn default() -> &'a IMGroupGetShieldRsp {
        <IMGroupGetShieldRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupGetShieldRsp {
    pub fn new() -> IMGroupGetShieldRsp {
        ::std::default::Default::default()
    }

    // required uint32 group_id = 1;


    pub fn get_group_id(&self) -> u32 {
        self.group_id.unwrap_or(0)
    }
    pub fn clear_group_id(&mut self) {
        self.group_id = ::std::option::Option::None;
    }

    pub fn has_group_id(&self) -> bool {
        self.group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: u32) {
        self.group_id = ::std::option::Option::Some(v);
    }

    // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;


    pub fn get_shield_status_list(&self) -> &[super::IM_BaseDefine::ShieldStatus] {
        &self.shield_status_list
    }
    pub fn clear_shield_status_list(&mut self) {
        self.shield_status_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_shield_status_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::ShieldStatus>) {
        self.shield_status_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shield_status_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::ShieldStatus> {
        &mut self.shield_status_list
    }

    // Take field
    pub fn take_shield_status_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::ShieldStatus> {
        ::std::mem::replace(&mut self.shield_status_list, ::protobuf::RepeatedField::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupGetShieldRsp {
    fn is_initialized(&self) -> bool {
        if self.group_id.is_none() {
            return false;
        }
        for v in &self.shield_status_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.group_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.shield_status_list)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.group_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.shield_status_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.group_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.shield_status_list {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupGetShieldRsp {
        IMGroupGetShieldRsp::new()
    }

    fn default_instance() -> &'static IMGroupGetShieldRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupGetShieldRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupGetShieldRsp,
        };
        unsafe {
            instance.get(IMGroupGetShieldRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupGetShieldRsp {
    fn clear(&mut self) {
        self.group_id = ::std::option::Option::None;
        self.shield_status_list.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupGetShieldRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileTransferReq {
    // message fields
    from_user_id: ::std::option::Option<u32>,
    to_user_id: ::std::option::Option<u32>,
    file_name: ::protobuf::SingularField<::std::string::String>,
    file_size: ::std::option::Option<u32>,
    trans_mode: ::std::option::Option<super::IM_BaseDefine::TransferFileType>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileTransferReq {
    fn default() -> &'a IMFileTransferReq {
        <IMFileTransferReq as ::protobuf::Message>::default_instance()
    }
}

impl IMFileTransferReq {
    pub fn new() -> IMFileTransferReq {
        ::std::default::Default::default()
    }

    // required uint32 from_user_id = 1;


    pub fn get_from_user_id(&self) -> u32 {
        self.from_user_id.unwrap_or(0)
    }
    pub fn clear_from_user_id(&mut self) {
        self.from_user_id = ::std::option::Option::None;
    }

    pub fn has_from_user_id(&self) -> bool {
        self.from_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_user_id(&mut self, v: u32) {
        self.from_user_id = ::std::option::Option::Some(v);
    }

    // required uint32 to_user_id = 2;


    pub fn get_to_user_id(&self) -> u32 {
        self.to_user_id.unwrap_or(0)
    }
    pub fn clear_to_user_id(&mut self) {
        self.to_user_id = ::std::option::Option::None;
    }

    pub fn has_to_user_id(&self) -> bool {
        self.to_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_user_id(&mut self, v: u32) {
        self.to_user_id = ::std::option::Option::Some(v);
    }

    // required string file_name = 3;


    pub fn get_file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_file_name(&mut self) {
        self.file_name.clear();
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name.set_default();
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 file_size = 4;


    pub fn get_file_size(&self) -> u32 {
        self.file_size.unwrap_or(0)
    }
    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u32) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.TransferFileType trans_mode = 5;


    pub fn get_trans_mode(&self) -> super::IM_BaseDefine::TransferFileType {
        self.trans_mode.unwrap_or(super::IM_BaseDefine::TransferFileType::FILE_TYPE_ONLINE)
    }
    pub fn clear_trans_mode(&mut self) {
        self.trans_mode = ::std::option::Option::None;
    }

    pub fn has_trans_mode(&self) -> bool {
        self.trans_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trans_mode(&mut self, v: super::IM_BaseDefine::TransferFileType) {
        self.trans_mode = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMFileTransferReq {
    fn is_initialized(&self) -> bool {
        if self.from_user_id.is_none() {
            return false;
        }
        if self.to_user_id.is_none() {
            return false;
        }
        if self.file_name.is_none() {
            return false;
        }
        if self.file_size.is_none() {
            return false;
        }
        if self.trans_mode.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.from_user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.to_user_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.file_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.file_size = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.trans_mode, 5, &mut self.unknown_fields)?
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.from_user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.to_user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.file_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.file_size {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.trans_mode {
            my_size += ::protobuf::rt::enum_size(5, v);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.from_user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.to_user_id {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.file_name.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.trans_mode {
            os.write_enum(5, v.value())?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileTransferReq {
        IMFileTransferReq::new()
    }

    fn default_instance() -> &'static IMFileTransferReq {
        static mut instance: ::protobuf::lazy::Lazy<IMFileTransferReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileTransferReq,
        };
        unsafe {
            instance.get(IMFileTransferReq::new)
        }
    }
}

impl ::protobuf::Clear for IMFileTransferReq {
    fn clear(&mut self) {
        self.from_user_id = ::std::option::Option::None;
        self.to_user_id = ::std::option::Option::None;
        self.file_name.clear();
        self.file_size = ::std::option::Option::None;
        self.trans_mode = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileTransferReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileTransferRsp {
    // message fields
    result_code: ::std::option::Option<u32>,
    from_user_id: ::std::option::Option<u32>,
    to_user_id: ::std::option::Option<u32>,
    file_name: ::protobuf::SingularField<::std::string::String>,
    file_size: ::std::option::Option<u32>,
    task_id: ::protobuf::SingularField<::std::string::String>,
    trans_mode: ::std::option::Option<super::IM_BaseDefine::TransferFileType>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileTransferRsp {
    fn default() -> &'a IMFileTransferRsp {
        <IMFileTransferRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMFileTransferRsp {
    pub fn new() -> IMFileTransferRsp {
        ::std::default::Default::default()
    }

    // required uint32 result_code = 1;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // required uint32 from_user_id = 2;


    pub fn get_from_user_id(&self) -> u32 {
        self.from_user_id.unwrap_or(0)
    }
    pub fn clear_from_user_id(&mut self) {
        self.from_user_id = ::std::option::Option::None;
    }

    pub fn has_from_user_id(&self) -> bool {
        self.from_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_user_id(&mut self, v: u32) {
        self.from_user_id = ::std::option::Option::Some(v);
    }

    // required uint32 to_user_id = 3;


    pub fn get_to_user_id(&self) -> u32 {
        self.to_user_id.unwrap_or(0)
    }
    pub fn clear_to_user_id(&mut self) {
        self.to_user_id = ::std::option::Option::None;
    }

    pub fn has_to_user_id(&self) -> bool {
        self.to_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_user_id(&mut self, v: u32) {
        self.to_user_id = ::std::option::Option::Some(v);
    }

    // optional string file_name = 4;


    pub fn get_file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_file_name(&mut self) {
        self.file_name.clear();
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name.set_default();
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 file_size = 5;


    pub fn get_file_size(&self) -> u32 {
        self.file_size.unwrap_or(0)
    }
    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u32) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // optional string task_id = 6;


    pub fn get_task_id(&self) -> &str {
        match self.task_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        if self.task_id.is_none() {
            self.task_id.set_default();
        }
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        self.task_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .IM.BaseDefine.TransferFileType trans_mode = 7;


    pub fn get_trans_mode(&self) -> super::IM_BaseDefine::TransferFileType {
        self.trans_mode.unwrap_or(super::IM_BaseDefine::TransferFileType::FILE_TYPE_ONLINE)
    }
    pub fn clear_trans_mode(&mut self) {
        self.trans_mode = ::std::option::Option::None;
    }

    pub fn has_trans_mode(&self) -> bool {
        self.trans_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trans_mode(&mut self, v: super::IM_BaseDefine::TransferFileType) {
        self.trans_mode = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMFileTransferRsp {
    fn is_initialized(&self) -> bool {
        if self.result_code.is_none() {
            return false;
        }
        if self.from_user_id.is_none() {
            return false;
        }
        if self.to_user_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.from_user_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.to_user_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.file_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.file_size = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.task_id)?;
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.trans_mode, 7, &mut self.unknown_fields)?
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.from_user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.to_user_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.file_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.file_size {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.task_id.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.trans_mode {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.result_code {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.from_user_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.to_user_id {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.file_name.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint32(5, v)?;
        }
        if let Some(ref v) = self.task_id.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(v) = self.trans_mode {
            os.write_enum(7, v.value())?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileTransferRsp {
        IMFileTransferRsp::new()
    }

    fn default_instance() -> &'static IMFileTransferRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMFileTransferRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileTransferRsp,
        };
        unsafe {
            instance.get(IMFileTransferRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMFileTransferRsp {
    fn clear(&mut self) {
        self.result_code = ::std::option::Option::None;
        self.from_user_id = ::std::option::Option::None;
        self.to_user_id = ::std::option::Option::None;
        self.file_name.clear();
        self.file_size = ::std::option::Option::None;
        self.task_id.clear();
        self.trans_mode = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileTransferRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileServerIPReq {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileServerIPReq {
    fn default() -> &'a IMFileServerIPReq {
        <IMFileServerIPReq as ::protobuf::Message>::default_instance()
    }
}

impl IMFileServerIPReq {
    pub fn new() -> IMFileServerIPReq {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for IMFileServerIPReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileServerIPReq {
        IMFileServerIPReq::new()
    }

    fn default_instance() -> &'static IMFileServerIPReq {
        static mut instance: ::protobuf::lazy::Lazy<IMFileServerIPReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileServerIPReq,
        };
        unsafe {
            instance.get(IMFileServerIPReq::new)
        }
    }
}

impl ::protobuf::Clear for IMFileServerIPReq {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileServerIPReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileServerIPRsp {
    // message fields
    ip_addr_list: ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileServerIPRsp {
    fn default() -> &'a IMFileServerIPRsp {
        <IMFileServerIPRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMFileServerIPRsp {
    pub fn new() -> IMFileServerIPRsp {
        ::std::default::Default::default()
    }

    // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;


    pub fn get_ip_addr_list(&self) -> &[super::IM_BaseDefine::IpAddr] {
        &self.ip_addr_list
    }
    pub fn clear_ip_addr_list(&mut self) {
        self.ip_addr_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip_addr_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr>) {
        self.ip_addr_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ip_addr_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr> {
        &mut self.ip_addr_list
    }

    // Take field
    pub fn take_ip_addr_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr> {
        ::std::mem::replace(&mut self.ip_addr_list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for IMFileServerIPRsp {
    fn is_initialized(&self) -> bool {
        for v in &self.ip_addr_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ip_addr_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ip_addr_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ip_addr_list {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileServerIPRsp {
        IMFileServerIPRsp::new()
    }

    fn default_instance() -> &'static IMFileServerIPRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMFileServerIPRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileServerIPRsp,
        };
        unsafe {
            instance.get(IMFileServerIPRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMFileServerIPRsp {
    fn clear(&mut self) {
        self.ip_addr_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileServerIPRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}
