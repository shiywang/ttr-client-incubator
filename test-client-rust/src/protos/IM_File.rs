// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `IM.File.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileLoginReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    task_id: ::protobuf::SingularField<::std::string::String>,
    file_role: ::std::option::Option<super::IM_BaseDefine::ClientFileRole>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileLoginReq {
    fn default() -> &'a IMFileLoginReq {
        <IMFileLoginReq as ::protobuf::Message>::default_instance()
    }
}

impl IMFileLoginReq {
    pub fn new() -> IMFileLoginReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required string task_id = 2;


    pub fn get_task_id(&self) -> &str {
        match self.task_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        if self.task_id.is_none() {
            self.task_id.set_default();
        }
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        self.task_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .IM.BaseDefine.ClientFileRole file_role = 3;


    pub fn get_file_role(&self) -> super::IM_BaseDefine::ClientFileRole {
        self.file_role.unwrap_or(super::IM_BaseDefine::ClientFileRole::CLIENT_REALTIME_SENDER)
    }
    pub fn clear_file_role(&mut self) {
        self.file_role = ::std::option::Option::None;
    }

    pub fn has_file_role(&self) -> bool {
        self.file_role.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_role(&mut self, v: super::IM_BaseDefine::ClientFileRole) {
        self.file_role = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMFileLoginReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.task_id.is_none() {
            return false;
        }
        if self.file_role.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.task_id)?;
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.file_role, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.task_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.file_role {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.task_id.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.file_role {
            os.write_enum(3, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileLoginReq {
        IMFileLoginReq::new()
    }

    fn default_instance() -> &'static IMFileLoginReq {
        static mut instance: ::protobuf::lazy::Lazy<IMFileLoginReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileLoginReq,
        };
        unsafe {
            instance.get(IMFileLoginReq::new)
        }
    }
}

impl ::protobuf::Clear for IMFileLoginReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.task_id.clear();
        self.file_role = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileLoginReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileLoginRsp {
    // message fields
    result_code: ::std::option::Option<u32>,
    task_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileLoginRsp {
    fn default() -> &'a IMFileLoginRsp {
        <IMFileLoginRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMFileLoginRsp {
    pub fn new() -> IMFileLoginRsp {
        ::std::default::Default::default()
    }

    // required uint32 result_code = 1;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // required string task_id = 2;


    pub fn get_task_id(&self) -> &str {
        match self.task_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        if self.task_id.is_none() {
            self.task_id.set_default();
        }
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        self.task_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for IMFileLoginRsp {
    fn is_initialized(&self) -> bool {
        if self.result_code.is_none() {
            return false;
        }
        if self.task_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.task_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.task_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.result_code {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.task_id.as_ref() {
            os.write_string(2, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileLoginRsp {
        IMFileLoginRsp::new()
    }

    fn default_instance() -> &'static IMFileLoginRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMFileLoginRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileLoginRsp,
        };
        unsafe {
            instance.get(IMFileLoginRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMFileLoginRsp {
    fn clear(&mut self) {
        self.result_code = ::std::option::Option::None;
        self.task_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileLoginRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileState {
    // message fields
    state: ::std::option::Option<super::IM_BaseDefine::ClientFileState>,
    task_id: ::protobuf::SingularField<::std::string::String>,
    user_id: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileState {
    fn default() -> &'a IMFileState {
        <IMFileState as ::protobuf::Message>::default_instance()
    }
}

impl IMFileState {
    pub fn new() -> IMFileState {
        ::std::default::Default::default()
    }

    // required .IM.BaseDefine.ClientFileState state = 1;


    pub fn get_state(&self) -> super::IM_BaseDefine::ClientFileState {
        self.state.unwrap_or(super::IM_BaseDefine::ClientFileState::CLIENT_FILE_PEER_READY)
    }
    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::IM_BaseDefine::ClientFileState) {
        self.state = ::std::option::Option::Some(v);
    }

    // required string task_id = 2;


    pub fn get_task_id(&self) -> &str {
        match self.task_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        if self.task_id.is_none() {
            self.task_id.set_default();
        }
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        self.task_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 user_id = 3;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMFileState {
    fn is_initialized(&self) -> bool {
        if self.state.is_none() {
            return false;
        }
        if self.task_id.is_none() {
            return false;
        }
        if self.user_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.task_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.state {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.task_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.state {
            os.write_enum(1, v.value())?;
        }
        if let Some(ref v) = self.task_id.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.user_id {
            os.write_uint32(3, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileState {
        IMFileState::new()
    }

    fn default_instance() -> &'static IMFileState {
        static mut instance: ::protobuf::lazy::Lazy<IMFileState> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileState,
        };
        unsafe {
            instance.get(IMFileState::new)
        }
    }
}

impl ::protobuf::Clear for IMFileState {
    fn clear(&mut self) {
        self.state = ::std::option::Option::None;
        self.task_id.clear();
        self.user_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFilePullDataReq {
    // message fields
    task_id: ::protobuf::SingularField<::std::string::String>,
    user_id: ::std::option::Option<u32>,
    trans_mode: ::std::option::Option<super::IM_BaseDefine::TransferFileType>,
    offset: ::std::option::Option<u32>,
    data_size: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFilePullDataReq {
    fn default() -> &'a IMFilePullDataReq {
        <IMFilePullDataReq as ::protobuf::Message>::default_instance()
    }
}

impl IMFilePullDataReq {
    pub fn new() -> IMFilePullDataReq {
        ::std::default::Default::default()
    }

    // required string task_id = 1;


    pub fn get_task_id(&self) -> &str {
        match self.task_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        if self.task_id.is_none() {
            self.task_id.set_default();
        }
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        self.task_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 user_id = 2;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.TransferFileType trans_mode = 3;


    pub fn get_trans_mode(&self) -> super::IM_BaseDefine::TransferFileType {
        self.trans_mode.unwrap_or(super::IM_BaseDefine::TransferFileType::FILE_TYPE_ONLINE)
    }
    pub fn clear_trans_mode(&mut self) {
        self.trans_mode = ::std::option::Option::None;
    }

    pub fn has_trans_mode(&self) -> bool {
        self.trans_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trans_mode(&mut self, v: super::IM_BaseDefine::TransferFileType) {
        self.trans_mode = ::std::option::Option::Some(v);
    }

    // required uint32 offset = 4;


    pub fn get_offset(&self) -> u32 {
        self.offset.unwrap_or(0)
    }
    pub fn clear_offset(&mut self) {
        self.offset = ::std::option::Option::None;
    }

    pub fn has_offset(&self) -> bool {
        self.offset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u32) {
        self.offset = ::std::option::Option::Some(v);
    }

    // required uint32 data_size = 5;


    pub fn get_data_size(&self) -> u32 {
        self.data_size.unwrap_or(0)
    }
    pub fn clear_data_size(&mut self) {
        self.data_size = ::std::option::Option::None;
    }

    pub fn has_data_size(&self) -> bool {
        self.data_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_size(&mut self, v: u32) {
        self.data_size = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMFilePullDataReq {
    fn is_initialized(&self) -> bool {
        if self.task_id.is_none() {
            return false;
        }
        if self.user_id.is_none() {
            return false;
        }
        if self.trans_mode.is_none() {
            return false;
        }
        if self.offset.is_none() {
            return false;
        }
        if self.data_size.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.task_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.trans_mode, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.offset = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.data_size = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.task_id.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.trans_mode {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let Some(v) = self.offset {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.data_size {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.task_id.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.user_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.trans_mode {
            os.write_enum(3, v.value())?;
        }
        if let Some(v) = self.offset {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.data_size {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFilePullDataReq {
        IMFilePullDataReq::new()
    }

    fn default_instance() -> &'static IMFilePullDataReq {
        static mut instance: ::protobuf::lazy::Lazy<IMFilePullDataReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFilePullDataReq,
        };
        unsafe {
            instance.get(IMFilePullDataReq::new)
        }
    }
}

impl ::protobuf::Clear for IMFilePullDataReq {
    fn clear(&mut self) {
        self.task_id.clear();
        self.user_id = ::std::option::Option::None;
        self.trans_mode = ::std::option::Option::None;
        self.offset = ::std::option::Option::None;
        self.data_size = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFilePullDataReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFilePullDataRsp {
    // message fields
    result_code: ::std::option::Option<u32>,
    task_id: ::protobuf::SingularField<::std::string::String>,
    user_id: ::std::option::Option<u32>,
    offset: ::std::option::Option<u32>,
    file_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFilePullDataRsp {
    fn default() -> &'a IMFilePullDataRsp {
        <IMFilePullDataRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMFilePullDataRsp {
    pub fn new() -> IMFilePullDataRsp {
        ::std::default::Default::default()
    }

    // required uint32 result_code = 1;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // required string task_id = 2;


    pub fn get_task_id(&self) -> &str {
        match self.task_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        if self.task_id.is_none() {
            self.task_id.set_default();
        }
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        self.task_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 user_id = 3;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required uint32 offset = 4;


    pub fn get_offset(&self) -> u32 {
        self.offset.unwrap_or(0)
    }
    pub fn clear_offset(&mut self) {
        self.offset = ::std::option::Option::None;
    }

    pub fn has_offset(&self) -> bool {
        self.offset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u32) {
        self.offset = ::std::option::Option::Some(v);
    }

    // required bytes file_data = 5;


    pub fn get_file_data(&self) -> &[u8] {
        match self.file_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_file_data(&mut self) {
        self.file_data.clear();
    }

    pub fn has_file_data(&self) -> bool {
        self.file_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.file_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.file_data.is_none() {
            self.file_data.set_default();
        }
        self.file_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_data(&mut self) -> ::std::vec::Vec<u8> {
        self.file_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMFilePullDataRsp {
    fn is_initialized(&self) -> bool {
        if self.result_code.is_none() {
            return false;
        }
        if self.task_id.is_none() {
            return false;
        }
        if self.user_id.is_none() {
            return false;
        }
        if self.offset.is_none() {
            return false;
        }
        if self.file_data.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.task_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.offset = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.file_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.task_id.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.offset {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.file_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.result_code {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.task_id.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.user_id {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.offset {
            os.write_uint32(4, v)?;
        }
        if let Some(ref v) = self.file_data.as_ref() {
            os.write_bytes(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFilePullDataRsp {
        IMFilePullDataRsp::new()
    }

    fn default_instance() -> &'static IMFilePullDataRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMFilePullDataRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFilePullDataRsp,
        };
        unsafe {
            instance.get(IMFilePullDataRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMFilePullDataRsp {
    fn clear(&mut self) {
        self.result_code = ::std::option::Option::None;
        self.task_id.clear();
        self.user_id = ::std::option::Option::None;
        self.offset = ::std::option::Option::None;
        self.file_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFilePullDataRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileReq {
    // message fields
    from_user_id: ::std::option::Option<u32>,
    to_user_id: ::std::option::Option<u32>,
    file_name: ::protobuf::SingularField<::std::string::String>,
    file_size: ::std::option::Option<u32>,
    trans_mode: ::std::option::Option<super::IM_BaseDefine::TransferFileType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileReq {
    fn default() -> &'a IMFileReq {
        <IMFileReq as ::protobuf::Message>::default_instance()
    }
}

impl IMFileReq {
    pub fn new() -> IMFileReq {
        ::std::default::Default::default()
    }

    // required uint32 from_user_id = 1;


    pub fn get_from_user_id(&self) -> u32 {
        self.from_user_id.unwrap_or(0)
    }
    pub fn clear_from_user_id(&mut self) {
        self.from_user_id = ::std::option::Option::None;
    }

    pub fn has_from_user_id(&self) -> bool {
        self.from_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_user_id(&mut self, v: u32) {
        self.from_user_id = ::std::option::Option::Some(v);
    }

    // required uint32 to_user_id = 2;


    pub fn get_to_user_id(&self) -> u32 {
        self.to_user_id.unwrap_or(0)
    }
    pub fn clear_to_user_id(&mut self) {
        self.to_user_id = ::std::option::Option::None;
    }

    pub fn has_to_user_id(&self) -> bool {
        self.to_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_user_id(&mut self, v: u32) {
        self.to_user_id = ::std::option::Option::Some(v);
    }

    // required string file_name = 3;


    pub fn get_file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_file_name(&mut self) {
        self.file_name.clear();
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name.set_default();
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 file_size = 4;


    pub fn get_file_size(&self) -> u32 {
        self.file_size.unwrap_or(0)
    }
    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u32) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.TransferFileType trans_mode = 5;


    pub fn get_trans_mode(&self) -> super::IM_BaseDefine::TransferFileType {
        self.trans_mode.unwrap_or(super::IM_BaseDefine::TransferFileType::FILE_TYPE_ONLINE)
    }
    pub fn clear_trans_mode(&mut self) {
        self.trans_mode = ::std::option::Option::None;
    }

    pub fn has_trans_mode(&self) -> bool {
        self.trans_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trans_mode(&mut self, v: super::IM_BaseDefine::TransferFileType) {
        self.trans_mode = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMFileReq {
    fn is_initialized(&self) -> bool {
        if self.from_user_id.is_none() {
            return false;
        }
        if self.to_user_id.is_none() {
            return false;
        }
        if self.file_name.is_none() {
            return false;
        }
        if self.file_size.is_none() {
            return false;
        }
        if self.trans_mode.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.from_user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.to_user_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.file_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.file_size = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.trans_mode, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.from_user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.to_user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.file_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.file_size {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.trans_mode {
            my_size += ::protobuf::rt::enum_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.from_user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.to_user_id {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.file_name.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.trans_mode {
            os.write_enum(5, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileReq {
        IMFileReq::new()
    }

    fn default_instance() -> &'static IMFileReq {
        static mut instance: ::protobuf::lazy::Lazy<IMFileReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileReq,
        };
        unsafe {
            instance.get(IMFileReq::new)
        }
    }
}

impl ::protobuf::Clear for IMFileReq {
    fn clear(&mut self) {
        self.from_user_id = ::std::option::Option::None;
        self.to_user_id = ::std::option::Option::None;
        self.file_name.clear();
        self.file_size = ::std::option::Option::None;
        self.trans_mode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileRsp {
    // message fields
    result_code: ::std::option::Option<u32>,
    from_user_id: ::std::option::Option<u32>,
    to_user_id: ::std::option::Option<u32>,
    file_name: ::protobuf::SingularField<::std::string::String>,
    task_id: ::protobuf::SingularField<::std::string::String>,
    ip_addr_list: ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr>,
    trans_mode: ::std::option::Option<super::IM_BaseDefine::TransferFileType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileRsp {
    fn default() -> &'a IMFileRsp {
        <IMFileRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMFileRsp {
    pub fn new() -> IMFileRsp {
        ::std::default::Default::default()
    }

    // required uint32 result_code = 1;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // required uint32 from_user_id = 2;


    pub fn get_from_user_id(&self) -> u32 {
        self.from_user_id.unwrap_or(0)
    }
    pub fn clear_from_user_id(&mut self) {
        self.from_user_id = ::std::option::Option::None;
    }

    pub fn has_from_user_id(&self) -> bool {
        self.from_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_user_id(&mut self, v: u32) {
        self.from_user_id = ::std::option::Option::Some(v);
    }

    // required uint32 to_user_id = 3;


    pub fn get_to_user_id(&self) -> u32 {
        self.to_user_id.unwrap_or(0)
    }
    pub fn clear_to_user_id(&mut self) {
        self.to_user_id = ::std::option::Option::None;
    }

    pub fn has_to_user_id(&self) -> bool {
        self.to_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_user_id(&mut self, v: u32) {
        self.to_user_id = ::std::option::Option::Some(v);
    }

    // required string file_name = 4;


    pub fn get_file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_file_name(&mut self) {
        self.file_name.clear();
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name.set_default();
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string task_id = 5;


    pub fn get_task_id(&self) -> &str {
        match self.task_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        if self.task_id.is_none() {
            self.task_id.set_default();
        }
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        self.task_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;


    pub fn get_ip_addr_list(&self) -> &[super::IM_BaseDefine::IpAddr] {
        &self.ip_addr_list
    }
    pub fn clear_ip_addr_list(&mut self) {
        self.ip_addr_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip_addr_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr>) {
        self.ip_addr_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ip_addr_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr> {
        &mut self.ip_addr_list
    }

    // Take field
    pub fn take_ip_addr_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr> {
        ::std::mem::replace(&mut self.ip_addr_list, ::protobuf::RepeatedField::new())
    }

    // required .IM.BaseDefine.TransferFileType trans_mode = 7;


    pub fn get_trans_mode(&self) -> super::IM_BaseDefine::TransferFileType {
        self.trans_mode.unwrap_or(super::IM_BaseDefine::TransferFileType::FILE_TYPE_ONLINE)
    }
    pub fn clear_trans_mode(&mut self) {
        self.trans_mode = ::std::option::Option::None;
    }

    pub fn has_trans_mode(&self) -> bool {
        self.trans_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trans_mode(&mut self, v: super::IM_BaseDefine::TransferFileType) {
        self.trans_mode = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMFileRsp {
    fn is_initialized(&self) -> bool {
        if self.result_code.is_none() {
            return false;
        }
        if self.from_user_id.is_none() {
            return false;
        }
        if self.to_user_id.is_none() {
            return false;
        }
        if self.file_name.is_none() {
            return false;
        }
        if self.task_id.is_none() {
            return false;
        }
        if self.trans_mode.is_none() {
            return false;
        }
        for v in &self.ip_addr_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.from_user_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.to_user_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.file_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.task_id)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ip_addr_list)?;
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.trans_mode, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.from_user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.to_user_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.file_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.task_id.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        for value in &self.ip_addr_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.trans_mode {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.result_code {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.from_user_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.to_user_id {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.file_name.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.task_id.as_ref() {
            os.write_string(5, &v)?;
        }
        for v in &self.ip_addr_list {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.trans_mode {
            os.write_enum(7, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileRsp {
        IMFileRsp::new()
    }

    fn default_instance() -> &'static IMFileRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMFileRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileRsp,
        };
        unsafe {
            instance.get(IMFileRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMFileRsp {
    fn clear(&mut self) {
        self.result_code = ::std::option::Option::None;
        self.from_user_id = ::std::option::Option::None;
        self.to_user_id = ::std::option::Option::None;
        self.file_name.clear();
        self.task_id.clear();
        self.ip_addr_list.clear();
        self.trans_mode = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileNotify {
    // message fields
    from_user_id: ::std::option::Option<u32>,
    to_user_id: ::std::option::Option<u32>,
    file_name: ::protobuf::SingularField<::std::string::String>,
    file_size: ::std::option::Option<u32>,
    task_id: ::protobuf::SingularField<::std::string::String>,
    ip_addr_list: ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr>,
    trans_mode: ::std::option::Option<super::IM_BaseDefine::TransferFileType>,
    offline_ready: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileNotify {
    fn default() -> &'a IMFileNotify {
        <IMFileNotify as ::protobuf::Message>::default_instance()
    }
}

impl IMFileNotify {
    pub fn new() -> IMFileNotify {
        ::std::default::Default::default()
    }

    // required uint32 from_user_id = 1;


    pub fn get_from_user_id(&self) -> u32 {
        self.from_user_id.unwrap_or(0)
    }
    pub fn clear_from_user_id(&mut self) {
        self.from_user_id = ::std::option::Option::None;
    }

    pub fn has_from_user_id(&self) -> bool {
        self.from_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_user_id(&mut self, v: u32) {
        self.from_user_id = ::std::option::Option::Some(v);
    }

    // required uint32 to_user_id = 2;


    pub fn get_to_user_id(&self) -> u32 {
        self.to_user_id.unwrap_or(0)
    }
    pub fn clear_to_user_id(&mut self) {
        self.to_user_id = ::std::option::Option::None;
    }

    pub fn has_to_user_id(&self) -> bool {
        self.to_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_user_id(&mut self, v: u32) {
        self.to_user_id = ::std::option::Option::Some(v);
    }

    // required string file_name = 3;


    pub fn get_file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_file_name(&mut self) {
        self.file_name.clear();
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name.set_default();
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 file_size = 4;


    pub fn get_file_size(&self) -> u32 {
        self.file_size.unwrap_or(0)
    }
    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u32) {
        self.file_size = ::std::option::Option::Some(v);
    }

    // required string task_id = 5;


    pub fn get_task_id(&self) -> &str {
        match self.task_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        if self.task_id.is_none() {
            self.task_id.set_default();
        }
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        self.task_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated .IM.BaseDefine.IpAddr ip_addr_list = 6;


    pub fn get_ip_addr_list(&self) -> &[super::IM_BaseDefine::IpAddr] {
        &self.ip_addr_list
    }
    pub fn clear_ip_addr_list(&mut self) {
        self.ip_addr_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip_addr_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr>) {
        self.ip_addr_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ip_addr_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr> {
        &mut self.ip_addr_list
    }

    // Take field
    pub fn take_ip_addr_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr> {
        ::std::mem::replace(&mut self.ip_addr_list, ::protobuf::RepeatedField::new())
    }

    // required .IM.BaseDefine.TransferFileType trans_mode = 7;


    pub fn get_trans_mode(&self) -> super::IM_BaseDefine::TransferFileType {
        self.trans_mode.unwrap_or(super::IM_BaseDefine::TransferFileType::FILE_TYPE_ONLINE)
    }
    pub fn clear_trans_mode(&mut self) {
        self.trans_mode = ::std::option::Option::None;
    }

    pub fn has_trans_mode(&self) -> bool {
        self.trans_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trans_mode(&mut self, v: super::IM_BaseDefine::TransferFileType) {
        self.trans_mode = ::std::option::Option::Some(v);
    }

    // required uint32 offline_ready = 8;


    pub fn get_offline_ready(&self) -> u32 {
        self.offline_ready.unwrap_or(0)
    }
    pub fn clear_offline_ready(&mut self) {
        self.offline_ready = ::std::option::Option::None;
    }

    pub fn has_offline_ready(&self) -> bool {
        self.offline_ready.is_some()
    }

    // Param is passed by value, moved
    pub fn set_offline_ready(&mut self, v: u32) {
        self.offline_ready = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMFileNotify {
    fn is_initialized(&self) -> bool {
        if self.from_user_id.is_none() {
            return false;
        }
        if self.to_user_id.is_none() {
            return false;
        }
        if self.file_name.is_none() {
            return false;
        }
        if self.file_size.is_none() {
            return false;
        }
        if self.task_id.is_none() {
            return false;
        }
        if self.trans_mode.is_none() {
            return false;
        }
        if self.offline_ready.is_none() {
            return false;
        }
        for v in &self.ip_addr_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.from_user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.to_user_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.file_name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.file_size = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.task_id)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ip_addr_list)?;
                },
                7 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.trans_mode, 7, &mut self.unknown_fields)?
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.offline_ready = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.from_user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.to_user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.file_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.file_size {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.task_id.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        for value in &self.ip_addr_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(v) = self.trans_mode {
            my_size += ::protobuf::rt::enum_size(7, v);
        }
        if let Some(v) = self.offline_ready {
            my_size += ::protobuf::rt::value_size(8, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.from_user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.to_user_id {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.file_name.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint32(4, v)?;
        }
        if let Some(ref v) = self.task_id.as_ref() {
            os.write_string(5, &v)?;
        }
        for v in &self.ip_addr_list {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(v) = self.trans_mode {
            os.write_enum(7, v.value())?;
        }
        if let Some(v) = self.offline_ready {
            os.write_uint32(8, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileNotify {
        IMFileNotify::new()
    }

    fn default_instance() -> &'static IMFileNotify {
        static mut instance: ::protobuf::lazy::Lazy<IMFileNotify> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileNotify,
        };
        unsafe {
            instance.get(IMFileNotify::new)
        }
    }
}

impl ::protobuf::Clear for IMFileNotify {
    fn clear(&mut self) {
        self.from_user_id = ::std::option::Option::None;
        self.to_user_id = ::std::option::Option::None;
        self.file_name.clear();
        self.file_size = ::std::option::Option::None;
        self.task_id.clear();
        self.ip_addr_list.clear();
        self.trans_mode = ::std::option::Option::None;
        self.offline_ready = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileNotify {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileHasOfflineReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileHasOfflineReq {
    fn default() -> &'a IMFileHasOfflineReq {
        <IMFileHasOfflineReq as ::protobuf::Message>::default_instance()
    }
}

impl IMFileHasOfflineReq {
    pub fn new() -> IMFileHasOfflineReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMFileHasOfflineReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileHasOfflineReq {
        IMFileHasOfflineReq::new()
    }

    fn default_instance() -> &'static IMFileHasOfflineReq {
        static mut instance: ::protobuf::lazy::Lazy<IMFileHasOfflineReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileHasOfflineReq,
        };
        unsafe {
            instance.get(IMFileHasOfflineReq::new)
        }
    }
}

impl ::protobuf::Clear for IMFileHasOfflineReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileHasOfflineReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileHasOfflineRsp {
    // message fields
    user_id: ::std::option::Option<u32>,
    offline_file_list: ::protobuf::RepeatedField<super::IM_BaseDefine::OfflineFileInfo>,
    ip_addr_list: ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileHasOfflineRsp {
    fn default() -> &'a IMFileHasOfflineRsp {
        <IMFileHasOfflineRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMFileHasOfflineRsp {
    pub fn new() -> IMFileHasOfflineRsp {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // repeated .IM.BaseDefine.OfflineFileInfo offline_file_list = 2;


    pub fn get_offline_file_list(&self) -> &[super::IM_BaseDefine::OfflineFileInfo] {
        &self.offline_file_list
    }
    pub fn clear_offline_file_list(&mut self) {
        self.offline_file_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_offline_file_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::OfflineFileInfo>) {
        self.offline_file_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_offline_file_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::OfflineFileInfo> {
        &mut self.offline_file_list
    }

    // Take field
    pub fn take_offline_file_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::OfflineFileInfo> {
        ::std::mem::replace(&mut self.offline_file_list, ::protobuf::RepeatedField::new())
    }

    // repeated .IM.BaseDefine.IpAddr ip_addr_list = 3;


    pub fn get_ip_addr_list(&self) -> &[super::IM_BaseDefine::IpAddr] {
        &self.ip_addr_list
    }
    pub fn clear_ip_addr_list(&mut self) {
        self.ip_addr_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip_addr_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr>) {
        self.ip_addr_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ip_addr_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr> {
        &mut self.ip_addr_list
    }

    // Take field
    pub fn take_ip_addr_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::IpAddr> {
        ::std::mem::replace(&mut self.ip_addr_list, ::protobuf::RepeatedField::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMFileHasOfflineRsp {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        for v in &self.offline_file_list {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ip_addr_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.offline_file_list)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ip_addr_list)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.offline_file_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.ip_addr_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.offline_file_list {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.ip_addr_list {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileHasOfflineRsp {
        IMFileHasOfflineRsp::new()
    }

    fn default_instance() -> &'static IMFileHasOfflineRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMFileHasOfflineRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileHasOfflineRsp,
        };
        unsafe {
            instance.get(IMFileHasOfflineRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMFileHasOfflineRsp {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.offline_file_list.clear();
        self.ip_addr_list.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileHasOfflineRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileAddOfflineReq {
    // message fields
    from_user_id: ::std::option::Option<u32>,
    to_user_id: ::std::option::Option<u32>,
    task_id: ::protobuf::SingularField<::std::string::String>,
    file_name: ::protobuf::SingularField<::std::string::String>,
    file_size: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileAddOfflineReq {
    fn default() -> &'a IMFileAddOfflineReq {
        <IMFileAddOfflineReq as ::protobuf::Message>::default_instance()
    }
}

impl IMFileAddOfflineReq {
    pub fn new() -> IMFileAddOfflineReq {
        ::std::default::Default::default()
    }

    // required uint32 from_user_id = 1;


    pub fn get_from_user_id(&self) -> u32 {
        self.from_user_id.unwrap_or(0)
    }
    pub fn clear_from_user_id(&mut self) {
        self.from_user_id = ::std::option::Option::None;
    }

    pub fn has_from_user_id(&self) -> bool {
        self.from_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_user_id(&mut self, v: u32) {
        self.from_user_id = ::std::option::Option::Some(v);
    }

    // required uint32 to_user_id = 2;


    pub fn get_to_user_id(&self) -> u32 {
        self.to_user_id.unwrap_or(0)
    }
    pub fn clear_to_user_id(&mut self) {
        self.to_user_id = ::std::option::Option::None;
    }

    pub fn has_to_user_id(&self) -> bool {
        self.to_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_user_id(&mut self, v: u32) {
        self.to_user_id = ::std::option::Option::Some(v);
    }

    // required string task_id = 3;


    pub fn get_task_id(&self) -> &str {
        match self.task_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        if self.task_id.is_none() {
            self.task_id.set_default();
        }
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        self.task_id.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string file_name = 4;


    pub fn get_file_name(&self) -> &str {
        match self.file_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_file_name(&mut self) {
        self.file_name.clear();
    }

    pub fn has_file_name(&self) -> bool {
        self.file_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_name(&mut self, v: ::std::string::String) {
        self.file_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_name(&mut self) -> &mut ::std::string::String {
        if self.file_name.is_none() {
            self.file_name.set_default();
        }
        self.file_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_name(&mut self) -> ::std::string::String {
        self.file_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required uint32 file_size = 5;


    pub fn get_file_size(&self) -> u32 {
        self.file_size.unwrap_or(0)
    }
    pub fn clear_file_size(&mut self) {
        self.file_size = ::std::option::Option::None;
    }

    pub fn has_file_size(&self) -> bool {
        self.file_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_size(&mut self, v: u32) {
        self.file_size = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMFileAddOfflineReq {
    fn is_initialized(&self) -> bool {
        if self.from_user_id.is_none() {
            return false;
        }
        if self.to_user_id.is_none() {
            return false;
        }
        if self.task_id.is_none() {
            return false;
        }
        if self.file_name.is_none() {
            return false;
        }
        if self.file_size.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.from_user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.to_user_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.task_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.file_name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.file_size = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.from_user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.to_user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.task_id.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.file_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.file_size {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.from_user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.to_user_id {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.task_id.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.file_name.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(v) = self.file_size {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileAddOfflineReq {
        IMFileAddOfflineReq::new()
    }

    fn default_instance() -> &'static IMFileAddOfflineReq {
        static mut instance: ::protobuf::lazy::Lazy<IMFileAddOfflineReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileAddOfflineReq,
        };
        unsafe {
            instance.get(IMFileAddOfflineReq::new)
        }
    }
}

impl ::protobuf::Clear for IMFileAddOfflineReq {
    fn clear(&mut self) {
        self.from_user_id = ::std::option::Option::None;
        self.to_user_id = ::std::option::Option::None;
        self.task_id.clear();
        self.file_name.clear();
        self.file_size = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileAddOfflineReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMFileDelOfflineReq {
    // message fields
    from_user_id: ::std::option::Option<u32>,
    to_user_id: ::std::option::Option<u32>,
    task_id: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMFileDelOfflineReq {
    fn default() -> &'a IMFileDelOfflineReq {
        <IMFileDelOfflineReq as ::protobuf::Message>::default_instance()
    }
}

impl IMFileDelOfflineReq {
    pub fn new() -> IMFileDelOfflineReq {
        ::std::default::Default::default()
    }

    // required uint32 from_user_id = 1;


    pub fn get_from_user_id(&self) -> u32 {
        self.from_user_id.unwrap_or(0)
    }
    pub fn clear_from_user_id(&mut self) {
        self.from_user_id = ::std::option::Option::None;
    }

    pub fn has_from_user_id(&self) -> bool {
        self.from_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_user_id(&mut self, v: u32) {
        self.from_user_id = ::std::option::Option::Some(v);
    }

    // required uint32 to_user_id = 2;


    pub fn get_to_user_id(&self) -> u32 {
        self.to_user_id.unwrap_or(0)
    }
    pub fn clear_to_user_id(&mut self) {
        self.to_user_id = ::std::option::Option::None;
    }

    pub fn has_to_user_id(&self) -> bool {
        self.to_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_user_id(&mut self, v: u32) {
        self.to_user_id = ::std::option::Option::Some(v);
    }

    // required string task_id = 3;


    pub fn get_task_id(&self) -> &str {
        match self.task_id.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_task_id(&mut self) {
        self.task_id.clear();
    }

    pub fn has_task_id(&self) -> bool {
        self.task_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: ::std::string::String) {
        self.task_id = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task_id(&mut self) -> &mut ::std::string::String {
        if self.task_id.is_none() {
            self.task_id.set_default();
        }
        self.task_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_task_id(&mut self) -> ::std::string::String {
        self.task_id.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for IMFileDelOfflineReq {
    fn is_initialized(&self) -> bool {
        if self.from_user_id.is_none() {
            return false;
        }
        if self.to_user_id.is_none() {
            return false;
        }
        if self.task_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.from_user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.to_user_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.task_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.from_user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.to_user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.task_id.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.from_user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.to_user_id {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.task_id.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMFileDelOfflineReq {
        IMFileDelOfflineReq::new()
    }

    fn default_instance() -> &'static IMFileDelOfflineReq {
        static mut instance: ::protobuf::lazy::Lazy<IMFileDelOfflineReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMFileDelOfflineReq,
        };
        unsafe {
            instance.get(IMFileDelOfflineReq::new)
        }
    }
}

impl ::protobuf::Clear for IMFileDelOfflineReq {
    fn clear(&mut self) {
        self.from_user_id = ::std::option::Option::None;
        self.to_user_id = ::std::option::Option::None;
        self.task_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMFileDelOfflineReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}
