// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `IM.Login.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMMsgServReq {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMMsgServReq {
    fn default() -> &'a IMMsgServReq {
        <IMMsgServReq as ::protobuf::Message>::default_instance()
    }
}

impl IMMsgServReq {
    pub fn new() -> IMMsgServReq {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for IMMsgServReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMMsgServReq {
        IMMsgServReq::new()
    }

    fn default_instance() -> &'static IMMsgServReq {
        static mut instance: ::protobuf::lazy::Lazy<IMMsgServReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMMsgServReq,
        };
        unsafe {
            instance.get(IMMsgServReq::new)
        }
    }
}

impl ::protobuf::Clear for IMMsgServReq {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMMsgServReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMMsgServRsp {
    // message fields
    result_code: ::std::option::Option<super::IM_BaseDefine::ResultType>,
    prior_ip: ::protobuf::SingularField<::std::string::String>,
    backip_ip: ::protobuf::SingularField<::std::string::String>,
    port: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMMsgServRsp {
    fn default() -> &'a IMMsgServRsp {
        <IMMsgServRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMMsgServRsp {
    pub fn new() -> IMMsgServRsp {
        ::std::default::Default::default()
    }

    // required .IM.BaseDefine.ResultType result_code = 1;


    pub fn get_result_code(&self) -> super::IM_BaseDefine::ResultType {
        self.result_code.unwrap_or(super::IM_BaseDefine::ResultType::REFUSE_REASON_NONE)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: super::IM_BaseDefine::ResultType) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // optional string prior_ip = 2;


    pub fn get_prior_ip(&self) -> &str {
        match self.prior_ip.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_prior_ip(&mut self) {
        self.prior_ip.clear();
    }

    pub fn has_prior_ip(&self) -> bool {
        self.prior_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prior_ip(&mut self, v: ::std::string::String) {
        self.prior_ip = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prior_ip(&mut self) -> &mut ::std::string::String {
        if self.prior_ip.is_none() {
            self.prior_ip.set_default();
        }
        self.prior_ip.as_mut().unwrap()
    }

    // Take field
    pub fn take_prior_ip(&mut self) -> ::std::string::String {
        self.prior_ip.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string backip_ip = 3;


    pub fn get_backip_ip(&self) -> &str {
        match self.backip_ip.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_backip_ip(&mut self) {
        self.backip_ip.clear();
    }

    pub fn has_backip_ip(&self) -> bool {
        self.backip_ip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_backip_ip(&mut self, v: ::std::string::String) {
        self.backip_ip = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_backip_ip(&mut self) -> &mut ::std::string::String {
        if self.backip_ip.is_none() {
            self.backip_ip.set_default();
        }
        self.backip_ip.as_mut().unwrap()
    }

    // Take field
    pub fn take_backip_ip(&mut self) -> ::std::string::String {
        self.backip_ip.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 port = 4;


    pub fn get_port(&self) -> u32 {
        self.port.unwrap_or(0)
    }
    pub fn clear_port(&mut self) {
        self.port = ::std::option::Option::None;
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMMsgServRsp {
    fn is_initialized(&self) -> bool {
        if self.result_code.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.result_code, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.prior_ip)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.backip_ip)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.prior_ip.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(ref v) = self.backip_ip.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.port {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.result_code {
            os.write_enum(1, v.value())?;
        }
        if let Some(ref v) = self.prior_ip.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(ref v) = self.backip_ip.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.port {
            os.write_uint32(4, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMMsgServRsp {
        IMMsgServRsp::new()
    }

    fn default_instance() -> &'static IMMsgServRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMMsgServRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMMsgServRsp,
        };
        unsafe {
            instance.get(IMMsgServRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMMsgServRsp {
    fn clear(&mut self) {
        self.result_code = ::std::option::Option::None;
        self.prior_ip.clear();
        self.backip_ip.clear();
        self.port = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMMsgServRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMLoginReq {
    // message fields
    user_name: ::protobuf::SingularField<::std::string::String>,
    password: ::protobuf::SingularField<::std::string::String>,
    online_status: ::std::option::Option<super::IM_BaseDefine::UserStatType>,
    client_type: ::std::option::Option<super::IM_BaseDefine::ClientType>,
    client_version: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMLoginReq {
    fn default() -> &'a IMLoginReq {
        <IMLoginReq as ::protobuf::Message>::default_instance()
    }
}

impl IMLoginReq {
    pub fn new() -> IMLoginReq {
        ::std::default::Default::default()
    }

    // required string user_name = 1;


    pub fn get_user_name(&self) -> &str {
        match self.user_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_user_name(&mut self) {
        self.user_name.clear();
    }

    pub fn has_user_name(&self) -> bool {
        self.user_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_name(&mut self, v: ::std::string::String) {
        self.user_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_name(&mut self) -> &mut ::std::string::String {
        if self.user_name.is_none() {
            self.user_name.set_default();
        }
        self.user_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_name(&mut self) -> ::std::string::String {
        self.user_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string password = 2;


    pub fn get_password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password.set_default();
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required .IM.BaseDefine.UserStatType online_status = 3;


    pub fn get_online_status(&self) -> super::IM_BaseDefine::UserStatType {
        self.online_status.unwrap_or(super::IM_BaseDefine::UserStatType::USER_STATUS_ONLINE)
    }
    pub fn clear_online_status(&mut self) {
        self.online_status = ::std::option::Option::None;
    }

    pub fn has_online_status(&self) -> bool {
        self.online_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_online_status(&mut self, v: super::IM_BaseDefine::UserStatType) {
        self.online_status = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.ClientType client_type = 4;


    pub fn get_client_type(&self) -> super::IM_BaseDefine::ClientType {
        self.client_type.unwrap_or(super::IM_BaseDefine::ClientType::CLIENT_TYPE_WINDOWS)
    }
    pub fn clear_client_type(&mut self) {
        self.client_type = ::std::option::Option::None;
    }

    pub fn has_client_type(&self) -> bool {
        self.client_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: super::IM_BaseDefine::ClientType) {
        self.client_type = ::std::option::Option::Some(v);
    }

    // optional string client_version = 5;


    pub fn get_client_version(&self) -> &str {
        match self.client_version.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_client_version(&mut self) {
        self.client_version.clear();
    }

    pub fn has_client_version(&self) -> bool {
        self.client_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_version(&mut self, v: ::std::string::String) {
        self.client_version = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_version(&mut self) -> &mut ::std::string::String {
        if self.client_version.is_none() {
            self.client_version.set_default();
        }
        self.client_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_version(&mut self) -> ::std::string::String {
        self.client_version.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for IMLoginReq {
    fn is_initialized(&self) -> bool {
        if self.user_name.is_none() {
            return false;
        }
        if self.password.is_none() {
            return false;
        }
        if self.online_status.is_none() {
            return false;
        }
        if self.client_type.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.user_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.password)?;
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.online_status, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.client_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.client_version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.user_name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(ref v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.online_status {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let Some(v) = self.client_type {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(ref v) = self.client_version.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.user_name.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(ref v) = self.password.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.online_status {
            os.write_enum(3, v.value())?;
        }
        if let Some(v) = self.client_type {
            os.write_enum(4, v.value())?;
        }
        if let Some(ref v) = self.client_version.as_ref() {
            os.write_string(5, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMLoginReq {
        IMLoginReq::new()
    }

    fn default_instance() -> &'static IMLoginReq {
        static mut instance: ::protobuf::lazy::Lazy<IMLoginReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMLoginReq,
        };
        unsafe {
            instance.get(IMLoginReq::new)
        }
    }
}

impl ::protobuf::Clear for IMLoginReq {
    fn clear(&mut self) {
        self.user_name.clear();
        self.password.clear();
        self.online_status = ::std::option::Option::None;
        self.client_type = ::std::option::Option::None;
        self.client_version.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMLoginReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMLoginRes {
    // message fields
    server_time: ::std::option::Option<u32>,
    result_code: ::std::option::Option<super::IM_BaseDefine::ResultType>,
    result_string: ::protobuf::SingularField<::std::string::String>,
    online_status: ::std::option::Option<super::IM_BaseDefine::UserStatType>,
    user_info: ::protobuf::SingularPtrField<super::IM_BaseDefine::UserInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMLoginRes {
    fn default() -> &'a IMLoginRes {
        <IMLoginRes as ::protobuf::Message>::default_instance()
    }
}

impl IMLoginRes {
    pub fn new() -> IMLoginRes {
        ::std::default::Default::default()
    }

    // required uint32 server_time = 1;


    pub fn get_server_time(&self) -> u32 {
        self.server_time.unwrap_or(0)
    }
    pub fn clear_server_time(&mut self) {
        self.server_time = ::std::option::Option::None;
    }

    pub fn has_server_time(&self) -> bool {
        self.server_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_time(&mut self, v: u32) {
        self.server_time = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.ResultType result_code = 2;


    pub fn get_result_code(&self) -> super::IM_BaseDefine::ResultType {
        self.result_code.unwrap_or(super::IM_BaseDefine::ResultType::REFUSE_REASON_NONE)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: super::IM_BaseDefine::ResultType) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // optional string result_string = 3;


    pub fn get_result_string(&self) -> &str {
        match self.result_string.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_result_string(&mut self) {
        self.result_string.clear();
    }

    pub fn has_result_string(&self) -> bool {
        self.result_string.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_string(&mut self, v: ::std::string::String) {
        self.result_string = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_string(&mut self) -> &mut ::std::string::String {
        if self.result_string.is_none() {
            self.result_string.set_default();
        }
        self.result_string.as_mut().unwrap()
    }

    // Take field
    pub fn take_result_string(&mut self) -> ::std::string::String {
        self.result_string.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .IM.BaseDefine.UserStatType online_status = 4;


    pub fn get_online_status(&self) -> super::IM_BaseDefine::UserStatType {
        self.online_status.unwrap_or(super::IM_BaseDefine::UserStatType::USER_STATUS_ONLINE)
    }
    pub fn clear_online_status(&mut self) {
        self.online_status = ::std::option::Option::None;
    }

    pub fn has_online_status(&self) -> bool {
        self.online_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_online_status(&mut self, v: super::IM_BaseDefine::UserStatType) {
        self.online_status = ::std::option::Option::Some(v);
    }

    // optional .IM.BaseDefine.UserInfo user_info = 5;


    pub fn get_user_info(&self) -> &super::IM_BaseDefine::UserInfo {
        self.user_info.as_ref().unwrap_or_else(|| super::IM_BaseDefine::UserInfo::default_instance())
    }
    pub fn clear_user_info(&mut self) {
        self.user_info.clear();
    }

    pub fn has_user_info(&self) -> bool {
        self.user_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_info(&mut self, v: super::IM_BaseDefine::UserInfo) {
        self.user_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_info(&mut self) -> &mut super::IM_BaseDefine::UserInfo {
        if self.user_info.is_none() {
            self.user_info.set_default();
        }
        self.user_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_user_info(&mut self) -> super::IM_BaseDefine::UserInfo {
        self.user_info.take().unwrap_or_else(|| super::IM_BaseDefine::UserInfo::new())
    }
}

impl ::protobuf::Message for IMLoginRes {
    fn is_initialized(&self) -> bool {
        if self.server_time.is_none() {
            return false;
        }
        if self.result_code.is_none() {
            return false;
        }
        for v in &self.user_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.server_time = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.result_code, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.result_string)?;
                },
                4 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.online_status, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.user_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.server_time {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.result_string.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.online_status {
            my_size += ::protobuf::rt::enum_size(4, v);
        }
        if let Some(ref v) = self.user_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.server_time {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.result_code {
            os.write_enum(2, v.value())?;
        }
        if let Some(ref v) = self.result_string.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(v) = self.online_status {
            os.write_enum(4, v.value())?;
        }
        if let Some(ref v) = self.user_info.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMLoginRes {
        IMLoginRes::new()
    }

    fn default_instance() -> &'static IMLoginRes {
        static mut instance: ::protobuf::lazy::Lazy<IMLoginRes> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMLoginRes,
        };
        unsafe {
            instance.get(IMLoginRes::new)
        }
    }
}

impl ::protobuf::Clear for IMLoginRes {
    fn clear(&mut self) {
        self.server_time = ::std::option::Option::None;
        self.result_code = ::std::option::Option::None;
        self.result_string.clear();
        self.online_status = ::std::option::Option::None;
        self.user_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMLoginRes {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMLogoutReq {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMLogoutReq {
    fn default() -> &'a IMLogoutReq {
        <IMLogoutReq as ::protobuf::Message>::default_instance()
    }
}

impl IMLogoutReq {
    pub fn new() -> IMLogoutReq {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for IMLogoutReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMLogoutReq {
        IMLogoutReq::new()
    }

    fn default_instance() -> &'static IMLogoutReq {
        static mut instance: ::protobuf::lazy::Lazy<IMLogoutReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMLogoutReq,
        };
        unsafe {
            instance.get(IMLogoutReq::new)
        }
    }
}

impl ::protobuf::Clear for IMLogoutReq {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMLogoutReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMLogoutRsp {
    // message fields
    result_code: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMLogoutRsp {
    fn default() -> &'a IMLogoutRsp {
        <IMLogoutRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMLogoutRsp {
    pub fn new() -> IMLogoutRsp {
        ::std::default::Default::default()
    }

    // required uint32 result_code = 1;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMLogoutRsp {
    fn is_initialized(&self) -> bool {
        if self.result_code.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.result_code {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMLogoutRsp {
        IMLogoutRsp::new()
    }

    fn default_instance() -> &'static IMLogoutRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMLogoutRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMLogoutRsp,
        };
        unsafe {
            instance.get(IMLogoutRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMLogoutRsp {
    fn clear(&mut self) {
        self.result_code = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMLogoutRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMKickUser {
    // message fields
    user_id: ::std::option::Option<u32>,
    kick_reason: ::std::option::Option<super::IM_BaseDefine::KickReasonType>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMKickUser {
    fn default() -> &'a IMKickUser {
        <IMKickUser as ::protobuf::Message>::default_instance()
    }
}

impl IMKickUser {
    pub fn new() -> IMKickUser {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.KickReasonType kick_reason = 2;


    pub fn get_kick_reason(&self) -> super::IM_BaseDefine::KickReasonType {
        self.kick_reason.unwrap_or(super::IM_BaseDefine::KickReasonType::KICK_REASON_DUPLICATE_USER)
    }
    pub fn clear_kick_reason(&mut self) {
        self.kick_reason = ::std::option::Option::None;
    }

    pub fn has_kick_reason(&self) -> bool {
        self.kick_reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kick_reason(&mut self, v: super::IM_BaseDefine::KickReasonType) {
        self.kick_reason = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMKickUser {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.kick_reason.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.kick_reason, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.kick_reason {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.kick_reason {
            os.write_enum(2, v.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMKickUser {
        IMKickUser::new()
    }

    fn default_instance() -> &'static IMKickUser {
        static mut instance: ::protobuf::lazy::Lazy<IMKickUser> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMKickUser,
        };
        unsafe {
            instance.get(IMKickUser::new)
        }
    }
}

impl ::protobuf::Clear for IMKickUser {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.kick_reason = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMKickUser {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMDeviceTokenReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    device_token: ::protobuf::SingularField<::std::string::String>,
    client_type: ::std::option::Option<super::IM_BaseDefine::ClientType>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMDeviceTokenReq {
    fn default() -> &'a IMDeviceTokenReq {
        <IMDeviceTokenReq as ::protobuf::Message>::default_instance()
    }
}

impl IMDeviceTokenReq {
    pub fn new() -> IMDeviceTokenReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required string device_token = 2;


    pub fn get_device_token(&self) -> &str {
        match self.device_token.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_device_token(&mut self) {
        self.device_token.clear();
    }

    pub fn has_device_token(&self) -> bool {
        self.device_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device_token(&mut self, v: ::std::string::String) {
        self.device_token = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device_token(&mut self) -> &mut ::std::string::String {
        if self.device_token.is_none() {
            self.device_token.set_default();
        }
        self.device_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_device_token(&mut self) -> ::std::string::String {
        self.device_token.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional .IM.BaseDefine.ClientType client_type = 3;


    pub fn get_client_type(&self) -> super::IM_BaseDefine::ClientType {
        self.client_type.unwrap_or(super::IM_BaseDefine::ClientType::CLIENT_TYPE_WINDOWS)
    }
    pub fn clear_client_type(&mut self) {
        self.client_type = ::std::option::Option::None;
    }

    pub fn has_client_type(&self) -> bool {
        self.client_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: super::IM_BaseDefine::ClientType) {
        self.client_type = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMDeviceTokenReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.device_token.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.device_token)?;
                },
                3 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.client_type, 3, &mut self.unknown_fields)?
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.device_token.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.client_type {
            my_size += ::protobuf::rt::enum_size(3, v);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.device_token.as_ref() {
            os.write_string(2, &v)?;
        }
        if let Some(v) = self.client_type {
            os.write_enum(3, v.value())?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMDeviceTokenReq {
        IMDeviceTokenReq::new()
    }

    fn default_instance() -> &'static IMDeviceTokenReq {
        static mut instance: ::protobuf::lazy::Lazy<IMDeviceTokenReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMDeviceTokenReq,
        };
        unsafe {
            instance.get(IMDeviceTokenReq::new)
        }
    }
}

impl ::protobuf::Clear for IMDeviceTokenReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.device_token.clear();
        self.client_type = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMDeviceTokenReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMDeviceTokenRsp {
    // message fields
    user_id: ::std::option::Option<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMDeviceTokenRsp {
    fn default() -> &'a IMDeviceTokenRsp {
        <IMDeviceTokenRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMDeviceTokenRsp {
    pub fn new() -> IMDeviceTokenRsp {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMDeviceTokenRsp {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMDeviceTokenRsp {
        IMDeviceTokenRsp::new()
    }

    fn default_instance() -> &'static IMDeviceTokenRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMDeviceTokenRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMDeviceTokenRsp,
        };
        unsafe {
            instance.get(IMDeviceTokenRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMDeviceTokenRsp {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMDeviceTokenRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMKickPCClientReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMKickPCClientReq {
    fn default() -> &'a IMKickPCClientReq {
        <IMKickPCClientReq as ::protobuf::Message>::default_instance()
    }
}

impl IMKickPCClientReq {
    pub fn new() -> IMKickPCClientReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMKickPCClientReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMKickPCClientReq {
        IMKickPCClientReq::new()
    }

    fn default_instance() -> &'static IMKickPCClientReq {
        static mut instance: ::protobuf::lazy::Lazy<IMKickPCClientReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMKickPCClientReq,
        };
        unsafe {
            instance.get(IMKickPCClientReq::new)
        }
    }
}

impl ::protobuf::Clear for IMKickPCClientReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMKickPCClientReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMKickPCClientRsp {
    // message fields
    user_id: ::std::option::Option<u32>,
    result_code: ::std::option::Option<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMKickPCClientRsp {
    fn default() -> &'a IMKickPCClientRsp {
        <IMKickPCClientRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMKickPCClientRsp {
    pub fn new() -> IMKickPCClientRsp {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required uint32 result_code = 2;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for IMKickPCClientRsp {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.result_code.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.result_code {
            os.write_uint32(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMKickPCClientRsp {
        IMKickPCClientRsp::new()
    }

    fn default_instance() -> &'static IMKickPCClientRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMKickPCClientRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMKickPCClientRsp,
        };
        unsafe {
            instance.get(IMKickPCClientRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMKickPCClientRsp {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.result_code = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMKickPCClientRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMPushShieldReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    shield_status: ::std::option::Option<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMPushShieldReq {
    fn default() -> &'a IMPushShieldReq {
        <IMPushShieldReq as ::protobuf::Message>::default_instance()
    }
}

impl IMPushShieldReq {
    pub fn new() -> IMPushShieldReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required uint32 shield_status = 2;


    pub fn get_shield_status(&self) -> u32 {
        self.shield_status.unwrap_or(0)
    }
    pub fn clear_shield_status(&mut self) {
        self.shield_status = ::std::option::Option::None;
    }

    pub fn has_shield_status(&self) -> bool {
        self.shield_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shield_status(&mut self, v: u32) {
        self.shield_status = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMPushShieldReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.shield_status.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shield_status = ::std::option::Option::Some(tmp);
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.shield_status {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.shield_status {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMPushShieldReq {
        IMPushShieldReq::new()
    }

    fn default_instance() -> &'static IMPushShieldReq {
        static mut instance: ::protobuf::lazy::Lazy<IMPushShieldReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMPushShieldReq,
        };
        unsafe {
            instance.get(IMPushShieldReq::new)
        }
    }
}

impl ::protobuf::Clear for IMPushShieldReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.shield_status = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMPushShieldReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMPushShieldRsp {
    // message fields
    user_id: ::std::option::Option<u32>,
    result_code: ::std::option::Option<u32>,
    shield_status: ::std::option::Option<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMPushShieldRsp {
    fn default() -> &'a IMPushShieldRsp {
        <IMPushShieldRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMPushShieldRsp {
    pub fn new() -> IMPushShieldRsp {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required uint32 result_code = 2;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // optional uint32 shield_status = 3;


    pub fn get_shield_status(&self) -> u32 {
        self.shield_status.unwrap_or(0)
    }
    pub fn clear_shield_status(&mut self) {
        self.shield_status = ::std::option::Option::None;
    }

    pub fn has_shield_status(&self) -> bool {
        self.shield_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shield_status(&mut self, v: u32) {
        self.shield_status = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMPushShieldRsp {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.result_code.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shield_status = ::std::option::Option::Some(tmp);
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.shield_status {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.result_code {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.shield_status {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMPushShieldRsp {
        IMPushShieldRsp::new()
    }

    fn default_instance() -> &'static IMPushShieldRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMPushShieldRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMPushShieldRsp,
        };
        unsafe {
            instance.get(IMPushShieldRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMPushShieldRsp {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.result_code = ::std::option::Option::None;
        self.shield_status = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMPushShieldRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMQueryPushShieldReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMQueryPushShieldReq {
    fn default() -> &'a IMQueryPushShieldReq {
        <IMQueryPushShieldReq as ::protobuf::Message>::default_instance()
    }
}

impl IMQueryPushShieldReq {
    pub fn new() -> IMQueryPushShieldReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMQueryPushShieldReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMQueryPushShieldReq {
        IMQueryPushShieldReq::new()
    }

    fn default_instance() -> &'static IMQueryPushShieldReq {
        static mut instance: ::protobuf::lazy::Lazy<IMQueryPushShieldReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMQueryPushShieldReq,
        };
        unsafe {
            instance.get(IMQueryPushShieldReq::new)
        }
    }
}

impl ::protobuf::Clear for IMQueryPushShieldReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMQueryPushShieldReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMQueryPushShieldRsp {
    // message fields
    user_id: ::std::option::Option<u32>,
    result_code: ::std::option::Option<u32>,
    shield_status: ::std::option::Option<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMQueryPushShieldRsp {
    fn default() -> &'a IMQueryPushShieldRsp {
        <IMQueryPushShieldRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMQueryPushShieldRsp {
    pub fn new() -> IMQueryPushShieldRsp {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required uint32 result_code = 2;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // optional uint32 shield_status = 3;


    pub fn get_shield_status(&self) -> u32 {
        self.shield_status.unwrap_or(0)
    }
    pub fn clear_shield_status(&mut self) {
        self.shield_status = ::std::option::Option::None;
    }

    pub fn has_shield_status(&self) -> bool {
        self.shield_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shield_status(&mut self, v: u32) {
        self.shield_status = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMQueryPushShieldRsp {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.result_code.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shield_status = ::std::option::Option::Some(tmp);
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.shield_status {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.result_code {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.shield_status {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMQueryPushShieldRsp {
        IMQueryPushShieldRsp::new()
    }

    fn default_instance() -> &'static IMQueryPushShieldRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMQueryPushShieldRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMQueryPushShieldRsp,
        };
        unsafe {
            instance.get(IMQueryPushShieldRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMQueryPushShieldRsp {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.result_code = ::std::option::Option::None;
        self.shield_status = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMQueryPushShieldRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}
