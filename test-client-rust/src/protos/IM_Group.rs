// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `IM.Group.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMNormalGroupListReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMNormalGroupListReq {
    fn default() -> &'a IMNormalGroupListReq {
        <IMNormalGroupListReq as ::protobuf::Message>::default_instance()
    }
}

impl IMNormalGroupListReq {
    pub fn new() -> IMNormalGroupListReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMNormalGroupListReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMNormalGroupListReq {
        IMNormalGroupListReq::new()
    }

    fn default_instance() -> &'static IMNormalGroupListReq {
        static mut instance: ::protobuf::lazy::Lazy<IMNormalGroupListReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMNormalGroupListReq,
        };
        unsafe {
            instance.get(IMNormalGroupListReq::new)
        }
    }
}

impl ::protobuf::Clear for IMNormalGroupListReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMNormalGroupListReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMNormalGroupListRsp {
    // message fields
    user_id: ::std::option::Option<u32>,
    group_version_list: ::protobuf::RepeatedField<super::IM_BaseDefine::GroupVersionInfo>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMNormalGroupListRsp {
    fn default() -> &'a IMNormalGroupListRsp {
        <IMNormalGroupListRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMNormalGroupListRsp {
    pub fn new() -> IMNormalGroupListRsp {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;


    pub fn get_group_version_list(&self) -> &[super::IM_BaseDefine::GroupVersionInfo] {
        &self.group_version_list
    }
    pub fn clear_group_version_list(&mut self) {
        self.group_version_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_version_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::GroupVersionInfo>) {
        self.group_version_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_group_version_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::GroupVersionInfo> {
        &mut self.group_version_list
    }

    // Take field
    pub fn take_group_version_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::GroupVersionInfo> {
        ::std::mem::replace(&mut self.group_version_list, ::protobuf::RepeatedField::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMNormalGroupListRsp {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        for v in &self.group_version_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.group_version_list)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.group_version_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.group_version_list {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMNormalGroupListRsp {
        IMNormalGroupListRsp::new()
    }

    fn default_instance() -> &'static IMNormalGroupListRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMNormalGroupListRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMNormalGroupListRsp,
        };
        unsafe {
            instance.get(IMNormalGroupListRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMNormalGroupListRsp {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.group_version_list.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMNormalGroupListRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupInfoListReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    group_version_list: ::protobuf::RepeatedField<super::IM_BaseDefine::GroupVersionInfo>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupInfoListReq {
    fn default() -> &'a IMGroupInfoListReq {
        <IMGroupInfoListReq as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupInfoListReq {
    pub fn new() -> IMGroupInfoListReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // repeated .IM.BaseDefine.GroupVersionInfo group_version_list = 2;


    pub fn get_group_version_list(&self) -> &[super::IM_BaseDefine::GroupVersionInfo] {
        &self.group_version_list
    }
    pub fn clear_group_version_list(&mut self) {
        self.group_version_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_version_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::GroupVersionInfo>) {
        self.group_version_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_group_version_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::GroupVersionInfo> {
        &mut self.group_version_list
    }

    // Take field
    pub fn take_group_version_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::GroupVersionInfo> {
        ::std::mem::replace(&mut self.group_version_list, ::protobuf::RepeatedField::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupInfoListReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        for v in &self.group_version_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.group_version_list)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.group_version_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.group_version_list {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupInfoListReq {
        IMGroupInfoListReq::new()
    }

    fn default_instance() -> &'static IMGroupInfoListReq {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupInfoListReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupInfoListReq,
        };
        unsafe {
            instance.get(IMGroupInfoListReq::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupInfoListReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.group_version_list.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupInfoListReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupInfoListRsp {
    // message fields
    user_id: ::std::option::Option<u32>,
    group_info_list: ::protobuf::RepeatedField<super::IM_BaseDefine::GroupInfo>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupInfoListRsp {
    fn default() -> &'a IMGroupInfoListRsp {
        <IMGroupInfoListRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupInfoListRsp {
    pub fn new() -> IMGroupInfoListRsp {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // repeated .IM.BaseDefine.GroupInfo group_info_list = 2;


    pub fn get_group_info_list(&self) -> &[super::IM_BaseDefine::GroupInfo] {
        &self.group_info_list
    }
    pub fn clear_group_info_list(&mut self) {
        self.group_info_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_group_info_list(&mut self, v: ::protobuf::RepeatedField<super::IM_BaseDefine::GroupInfo>) {
        self.group_info_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_group_info_list(&mut self) -> &mut ::protobuf::RepeatedField<super::IM_BaseDefine::GroupInfo> {
        &mut self.group_info_list
    }

    // Take field
    pub fn take_group_info_list(&mut self) -> ::protobuf::RepeatedField<super::IM_BaseDefine::GroupInfo> {
        ::std::mem::replace(&mut self.group_info_list, ::protobuf::RepeatedField::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupInfoListRsp {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        for v in &self.group_info_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.group_info_list)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.group_info_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        for v in &self.group_info_list {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupInfoListRsp {
        IMGroupInfoListRsp::new()
    }

    fn default_instance() -> &'static IMGroupInfoListRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupInfoListRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupInfoListRsp,
        };
        unsafe {
            instance.get(IMGroupInfoListRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupInfoListRsp {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.group_info_list.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupInfoListRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupCreateReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    group_type: ::std::option::Option<super::IM_BaseDefine::GroupType>,
    group_name: ::protobuf::SingularField<::std::string::String>,
    group_avatar: ::protobuf::SingularField<::std::string::String>,
    member_id_list: ::std::vec::Vec<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupCreateReq {
    fn default() -> &'a IMGroupCreateReq {
        <IMGroupCreateReq as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupCreateReq {
    pub fn new() -> IMGroupCreateReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.GroupType group_type = 2;


    pub fn get_group_type(&self) -> super::IM_BaseDefine::GroupType {
        self.group_type.unwrap_or(super::IM_BaseDefine::GroupType::GROUP_TYPE_TMP)
    }
    pub fn clear_group_type(&mut self) {
        self.group_type = ::std::option::Option::None;
    }

    pub fn has_group_type(&self) -> bool {
        self.group_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_type(&mut self, v: super::IM_BaseDefine::GroupType) {
        self.group_type = ::std::option::Option::Some(v);
    }

    // required string group_name = 3;


    pub fn get_group_name(&self) -> &str {
        match self.group_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_group_name(&mut self) {
        self.group_name.clear();
    }

    pub fn has_group_name(&self) -> bool {
        self.group_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_name(&mut self, v: ::std::string::String) {
        self.group_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_name(&mut self) -> &mut ::std::string::String {
        if self.group_name.is_none() {
            self.group_name.set_default();
        }
        self.group_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_group_name(&mut self) -> ::std::string::String {
        self.group_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string group_avatar = 4;


    pub fn get_group_avatar(&self) -> &str {
        match self.group_avatar.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_group_avatar(&mut self) {
        self.group_avatar.clear();
    }

    pub fn has_group_avatar(&self) -> bool {
        self.group_avatar.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_avatar(&mut self, v: ::std::string::String) {
        self.group_avatar = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_avatar(&mut self) -> &mut ::std::string::String {
        if self.group_avatar.is_none() {
            self.group_avatar.set_default();
        }
        self.group_avatar.as_mut().unwrap()
    }

    // Take field
    pub fn take_group_avatar(&mut self) -> ::std::string::String {
        self.group_avatar.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated uint32 member_id_list = 5;


    pub fn get_member_id_list(&self) -> &[u32] {
        &self.member_id_list
    }
    pub fn clear_member_id_list(&mut self) {
        self.member_id_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_member_id_list(&mut self, v: ::std::vec::Vec<u32>) {
        self.member_id_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_member_id_list(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.member_id_list
    }

    // Take field
    pub fn take_member_id_list(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.member_id_list, ::std::vec::Vec::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupCreateReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.group_type.is_none() {
            return false;
        }
        if self.group_name.is_none() {
            return false;
        }
        if self.group_avatar.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.group_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.group_name)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.group_avatar)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.member_id_list)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.group_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(ref v) = self.group_name.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(ref v) = self.group_avatar.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        for value in &self.member_id_list {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.group_type {
            os.write_enum(2, v.value())?;
        }
        if let Some(ref v) = self.group_name.as_ref() {
            os.write_string(3, &v)?;
        }
        if let Some(ref v) = self.group_avatar.as_ref() {
            os.write_string(4, &v)?;
        }
        for v in &self.member_id_list {
            os.write_uint32(5, *v)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupCreateReq {
        IMGroupCreateReq::new()
    }

    fn default_instance() -> &'static IMGroupCreateReq {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupCreateReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupCreateReq,
        };
        unsafe {
            instance.get(IMGroupCreateReq::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupCreateReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.group_type = ::std::option::Option::None;
        self.group_name.clear();
        self.group_avatar.clear();
        self.member_id_list.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupCreateReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupCreateRsp {
    // message fields
    user_id: ::std::option::Option<u32>,
    result_code: ::std::option::Option<u32>,
    group_id: ::std::option::Option<u32>,
    group_name: ::protobuf::SingularField<::std::string::String>,
    user_id_list: ::std::vec::Vec<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupCreateRsp {
    fn default() -> &'a IMGroupCreateRsp {
        <IMGroupCreateRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupCreateRsp {
    pub fn new() -> IMGroupCreateRsp {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required uint32 result_code = 2;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // optional uint32 group_id = 3;


    pub fn get_group_id(&self) -> u32 {
        self.group_id.unwrap_or(0)
    }
    pub fn clear_group_id(&mut self) {
        self.group_id = ::std::option::Option::None;
    }

    pub fn has_group_id(&self) -> bool {
        self.group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: u32) {
        self.group_id = ::std::option::Option::Some(v);
    }

    // required string group_name = 4;


    pub fn get_group_name(&self) -> &str {
        match self.group_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_group_name(&mut self) {
        self.group_name.clear();
    }

    pub fn has_group_name(&self) -> bool {
        self.group_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_name(&mut self, v: ::std::string::String) {
        self.group_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group_name(&mut self) -> &mut ::std::string::String {
        if self.group_name.is_none() {
            self.group_name.set_default();
        }
        self.group_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_group_name(&mut self) -> ::std::string::String {
        self.group_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated uint32 user_id_list = 5;


    pub fn get_user_id_list(&self) -> &[u32] {
        &self.user_id_list
    }
    pub fn clear_user_id_list(&mut self) {
        self.user_id_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_id_list(&mut self, v: ::std::vec::Vec<u32>) {
        self.user_id_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_user_id_list(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.user_id_list
    }

    // Take field
    pub fn take_user_id_list(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.user_id_list, ::std::vec::Vec::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupCreateRsp {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.result_code.is_none() {
            return false;
        }
        if self.group_name.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.group_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.group_name)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.user_id_list)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.group_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.group_name.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        for value in &self.user_id_list {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.result_code {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.group_id {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.group_name.as_ref() {
            os.write_string(4, &v)?;
        }
        for v in &self.user_id_list {
            os.write_uint32(5, *v)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupCreateRsp {
        IMGroupCreateRsp::new()
    }

    fn default_instance() -> &'static IMGroupCreateRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupCreateRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupCreateRsp,
        };
        unsafe {
            instance.get(IMGroupCreateRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupCreateRsp {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.result_code = ::std::option::Option::None;
        self.group_id = ::std::option::Option::None;
        self.group_name.clear();
        self.user_id_list.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupCreateRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupChangeMemberReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    change_type: ::std::option::Option<super::IM_BaseDefine::GroupModifyType>,
    group_id: ::std::option::Option<u32>,
    member_id_list: ::std::vec::Vec<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupChangeMemberReq {
    fn default() -> &'a IMGroupChangeMemberReq {
        <IMGroupChangeMemberReq as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupChangeMemberReq {
    pub fn new() -> IMGroupChangeMemberReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.GroupModifyType change_type = 2;


    pub fn get_change_type(&self) -> super::IM_BaseDefine::GroupModifyType {
        self.change_type.unwrap_or(super::IM_BaseDefine::GroupModifyType::GROUP_MODIFY_TYPE_ADD)
    }
    pub fn clear_change_type(&mut self) {
        self.change_type = ::std::option::Option::None;
    }

    pub fn has_change_type(&self) -> bool {
        self.change_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_change_type(&mut self, v: super::IM_BaseDefine::GroupModifyType) {
        self.change_type = ::std::option::Option::Some(v);
    }

    // required uint32 group_id = 3;


    pub fn get_group_id(&self) -> u32 {
        self.group_id.unwrap_or(0)
    }
    pub fn clear_group_id(&mut self) {
        self.group_id = ::std::option::Option::None;
    }

    pub fn has_group_id(&self) -> bool {
        self.group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: u32) {
        self.group_id = ::std::option::Option::Some(v);
    }

    // repeated uint32 member_id_list = 4;


    pub fn get_member_id_list(&self) -> &[u32] {
        &self.member_id_list
    }
    pub fn clear_member_id_list(&mut self) {
        self.member_id_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_member_id_list(&mut self, v: ::std::vec::Vec<u32>) {
        self.member_id_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_member_id_list(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.member_id_list
    }

    // Take field
    pub fn take_member_id_list(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.member_id_list, ::std::vec::Vec::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupChangeMemberReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.change_type.is_none() {
            return false;
        }
        if self.group_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.change_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.group_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.member_id_list)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.change_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.group_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.member_id_list {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.change_type {
            os.write_enum(2, v.value())?;
        }
        if let Some(v) = self.group_id {
            os.write_uint32(3, v)?;
        }
        for v in &self.member_id_list {
            os.write_uint32(4, *v)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupChangeMemberReq {
        IMGroupChangeMemberReq::new()
    }

    fn default_instance() -> &'static IMGroupChangeMemberReq {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupChangeMemberReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupChangeMemberReq,
        };
        unsafe {
            instance.get(IMGroupChangeMemberReq::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupChangeMemberReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.change_type = ::std::option::Option::None;
        self.group_id = ::std::option::Option::None;
        self.member_id_list.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupChangeMemberReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupChangeMemberRsp {
    // message fields
    user_id: ::std::option::Option<u32>,
    change_type: ::std::option::Option<super::IM_BaseDefine::GroupModifyType>,
    result_code: ::std::option::Option<u32>,
    group_id: ::std::option::Option<u32>,
    cur_user_id_list: ::std::vec::Vec<u32>,
    chg_user_id_list: ::std::vec::Vec<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupChangeMemberRsp {
    fn default() -> &'a IMGroupChangeMemberRsp {
        <IMGroupChangeMemberRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupChangeMemberRsp {
    pub fn new() -> IMGroupChangeMemberRsp {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.GroupModifyType change_type = 2;


    pub fn get_change_type(&self) -> super::IM_BaseDefine::GroupModifyType {
        self.change_type.unwrap_or(super::IM_BaseDefine::GroupModifyType::GROUP_MODIFY_TYPE_ADD)
    }
    pub fn clear_change_type(&mut self) {
        self.change_type = ::std::option::Option::None;
    }

    pub fn has_change_type(&self) -> bool {
        self.change_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_change_type(&mut self, v: super::IM_BaseDefine::GroupModifyType) {
        self.change_type = ::std::option::Option::Some(v);
    }

    // required uint32 result_code = 3;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // required uint32 group_id = 4;


    pub fn get_group_id(&self) -> u32 {
        self.group_id.unwrap_or(0)
    }
    pub fn clear_group_id(&mut self) {
        self.group_id = ::std::option::Option::None;
    }

    pub fn has_group_id(&self) -> bool {
        self.group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: u32) {
        self.group_id = ::std::option::Option::Some(v);
    }

    // repeated uint32 cur_user_id_list = 5;


    pub fn get_cur_user_id_list(&self) -> &[u32] {
        &self.cur_user_id_list
    }
    pub fn clear_cur_user_id_list(&mut self) {
        self.cur_user_id_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_cur_user_id_list(&mut self, v: ::std::vec::Vec<u32>) {
        self.cur_user_id_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cur_user_id_list(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.cur_user_id_list
    }

    // Take field
    pub fn take_cur_user_id_list(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.cur_user_id_list, ::std::vec::Vec::new())
    }

    // repeated uint32 chg_user_id_list = 6;


    pub fn get_chg_user_id_list(&self) -> &[u32] {
        &self.chg_user_id_list
    }
    pub fn clear_chg_user_id_list(&mut self) {
        self.chg_user_id_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_chg_user_id_list(&mut self, v: ::std::vec::Vec<u32>) {
        self.chg_user_id_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chg_user_id_list(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.chg_user_id_list
    }

    // Take field
    pub fn take_chg_user_id_list(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.chg_user_id_list, ::std::vec::Vec::new())
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupChangeMemberRsp {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.change_type.is_none() {
            return false;
        }
        if self.result_code.is_none() {
            return false;
        }
        if self.group_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.change_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.group_id = ::std::option::Option::Some(tmp);
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.cur_user_id_list)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.chg_user_id_list)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.change_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.group_id {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cur_user_id_list {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.chg_user_id_list {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.change_type {
            os.write_enum(2, v.value())?;
        }
        if let Some(v) = self.result_code {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.group_id {
            os.write_uint32(4, v)?;
        }
        for v in &self.cur_user_id_list {
            os.write_uint32(5, *v)?;
        };
        for v in &self.chg_user_id_list {
            os.write_uint32(6, *v)?;
        };
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupChangeMemberRsp {
        IMGroupChangeMemberRsp::new()
    }

    fn default_instance() -> &'static IMGroupChangeMemberRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupChangeMemberRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupChangeMemberRsp,
        };
        unsafe {
            instance.get(IMGroupChangeMemberRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupChangeMemberRsp {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.change_type = ::std::option::Option::None;
        self.result_code = ::std::option::Option::None;
        self.group_id = ::std::option::Option::None;
        self.cur_user_id_list.clear();
        self.chg_user_id_list.clear();
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupChangeMemberRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupShieldReq {
    // message fields
    user_id: ::std::option::Option<u32>,
    group_id: ::std::option::Option<u32>,
    shield_status: ::std::option::Option<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupShieldReq {
    fn default() -> &'a IMGroupShieldReq {
        <IMGroupShieldReq as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupShieldReq {
    pub fn new() -> IMGroupShieldReq {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required uint32 group_id = 2;


    pub fn get_group_id(&self) -> u32 {
        self.group_id.unwrap_or(0)
    }
    pub fn clear_group_id(&mut self) {
        self.group_id = ::std::option::Option::None;
    }

    pub fn has_group_id(&self) -> bool {
        self.group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: u32) {
        self.group_id = ::std::option::Option::Some(v);
    }

    // required uint32 shield_status = 3;


    pub fn get_shield_status(&self) -> u32 {
        self.shield_status.unwrap_or(0)
    }
    pub fn clear_shield_status(&mut self) {
        self.shield_status = ::std::option::Option::None;
    }

    pub fn has_shield_status(&self) -> bool {
        self.shield_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shield_status(&mut self, v: u32) {
        self.shield_status = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupShieldReq {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.group_id.is_none() {
            return false;
        }
        if self.shield_status.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.group_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.shield_status = ::std::option::Option::Some(tmp);
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.group_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.shield_status {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.group_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.shield_status {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupShieldReq {
        IMGroupShieldReq::new()
    }

    fn default_instance() -> &'static IMGroupShieldReq {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupShieldReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupShieldReq,
        };
        unsafe {
            instance.get(IMGroupShieldReq::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupShieldReq {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.group_id = ::std::option::Option::None;
        self.shield_status = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupShieldReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupShieldRsp {
    // message fields
    user_id: ::std::option::Option<u32>,
    group_id: ::std::option::Option<u32>,
    result_code: ::std::option::Option<u32>,
    attach_data: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupShieldRsp {
    fn default() -> &'a IMGroupShieldRsp {
        <IMGroupShieldRsp as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupShieldRsp {
    pub fn new() -> IMGroupShieldRsp {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required uint32 group_id = 2;


    pub fn get_group_id(&self) -> u32 {
        self.group_id.unwrap_or(0)
    }
    pub fn clear_group_id(&mut self) {
        self.group_id = ::std::option::Option::None;
    }

    pub fn has_group_id(&self) -> bool {
        self.group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: u32) {
        self.group_id = ::std::option::Option::Some(v);
    }

    // required uint32 result_code = 3;


    pub fn get_result_code(&self) -> u32 {
        self.result_code.unwrap_or(0)
    }
    pub fn clear_result_code(&mut self) {
        self.result_code = ::std::option::Option::None;
    }

    pub fn has_result_code(&self) -> bool {
        self.result_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_code(&mut self, v: u32) {
        self.result_code = ::std::option::Option::Some(v);
    }

    // optional bytes attach_data = 20;


    pub fn get_attach_data(&self) -> &[u8] {
        match self.attach_data.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_attach_data(&mut self) {
        self.attach_data.clear();
    }

    pub fn has_attach_data(&self) -> bool {
        self.attach_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attach_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.attach_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attach_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.attach_data.is_none() {
            self.attach_data.set_default();
        }
        self.attach_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_attach_data(&mut self) -> ::std::vec::Vec<u8> {
        self.attach_data.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupShieldRsp {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.group_id.is_none() {
            return false;
        }
        if self.result_code.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.group_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.result_code = ::std::option::Option::Some(tmp);
                },
                20 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.attach_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.group_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.result_code {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(20, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.group_id {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.result_code {
            os.write_uint32(3, v)?;
        }
        if let Some(ref v) = self.attach_data.as_ref() {
            os.write_bytes(20, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupShieldRsp {
        IMGroupShieldRsp::new()
    }

    fn default_instance() -> &'static IMGroupShieldRsp {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupShieldRsp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupShieldRsp,
        };
        unsafe {
            instance.get(IMGroupShieldRsp::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupShieldRsp {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.group_id = ::std::option::Option::None;
        self.result_code = ::std::option::Option::None;
        self.attach_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupShieldRsp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMGroupChangeMemberNotify {
    // message fields
    user_id: ::std::option::Option<u32>,
    change_type: ::std::option::Option<super::IM_BaseDefine::GroupModifyType>,
    group_id: ::std::option::Option<u32>,
    cur_user_id_list: ::std::vec::Vec<u32>,
    chg_user_id_list: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMGroupChangeMemberNotify {
    fn default() -> &'a IMGroupChangeMemberNotify {
        <IMGroupChangeMemberNotify as ::protobuf::Message>::default_instance()
    }
}

impl IMGroupChangeMemberNotify {
    pub fn new() -> IMGroupChangeMemberNotify {
        ::std::default::Default::default()
    }

    // required uint32 user_id = 1;


    pub fn get_user_id(&self) -> u32 {
        self.user_id.unwrap_or(0)
    }
    pub fn clear_user_id(&mut self) {
        self.user_id = ::std::option::Option::None;
    }

    pub fn has_user_id(&self) -> bool {
        self.user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_user_id(&mut self, v: u32) {
        self.user_id = ::std::option::Option::Some(v);
    }

    // required .IM.BaseDefine.GroupModifyType change_type = 2;


    pub fn get_change_type(&self) -> super::IM_BaseDefine::GroupModifyType {
        self.change_type.unwrap_or(super::IM_BaseDefine::GroupModifyType::GROUP_MODIFY_TYPE_ADD)
    }
    pub fn clear_change_type(&mut self) {
        self.change_type = ::std::option::Option::None;
    }

    pub fn has_change_type(&self) -> bool {
        self.change_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_change_type(&mut self, v: super::IM_BaseDefine::GroupModifyType) {
        self.change_type = ::std::option::Option::Some(v);
    }

    // required uint32 group_id = 3;


    pub fn get_group_id(&self) -> u32 {
        self.group_id.unwrap_or(0)
    }
    pub fn clear_group_id(&mut self) {
        self.group_id = ::std::option::Option::None;
    }

    pub fn has_group_id(&self) -> bool {
        self.group_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group_id(&mut self, v: u32) {
        self.group_id = ::std::option::Option::Some(v);
    }

    // repeated uint32 cur_user_id_list = 4;


    pub fn get_cur_user_id_list(&self) -> &[u32] {
        &self.cur_user_id_list
    }
    pub fn clear_cur_user_id_list(&mut self) {
        self.cur_user_id_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_cur_user_id_list(&mut self, v: ::std::vec::Vec<u32>) {
        self.cur_user_id_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cur_user_id_list(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.cur_user_id_list
    }

    // Take field
    pub fn take_cur_user_id_list(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.cur_user_id_list, ::std::vec::Vec::new())
    }

    // repeated uint32 chg_user_id_list = 5;


    pub fn get_chg_user_id_list(&self) -> &[u32] {
        &self.chg_user_id_list
    }
    pub fn clear_chg_user_id_list(&mut self) {
        self.chg_user_id_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_chg_user_id_list(&mut self, v: ::std::vec::Vec<u32>) {
        self.chg_user_id_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chg_user_id_list(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.chg_user_id_list
    }

    // Take field
    pub fn take_chg_user_id_list(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.chg_user_id_list, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IMGroupChangeMemberNotify {
    fn is_initialized(&self) -> bool {
        if self.user_id.is_none() {
            return false;
        }
        if self.change_type.is_none() {
            return false;
        }
        if self.group_id.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.change_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.group_id = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.cur_user_id_list)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.chg_user_id_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.change_type {
            my_size += ::protobuf::rt::enum_size(2, v);
        }
        if let Some(v) = self.group_id {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.cur_user_id_list {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.chg_user_id_list {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.change_type {
            os.write_enum(2, v.value())?;
        }
        if let Some(v) = self.group_id {
            os.write_uint32(3, v)?;
        }
        for v in &self.cur_user_id_list {
            os.write_uint32(4, *v)?;
        };
        for v in &self.chg_user_id_list {
            os.write_uint32(5, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMGroupChangeMemberNotify {
        IMGroupChangeMemberNotify::new()
    }

    fn default_instance() -> &'static IMGroupChangeMemberNotify {
        static mut instance: ::protobuf::lazy::Lazy<IMGroupChangeMemberNotify> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMGroupChangeMemberNotify,
        };
        unsafe {
            instance.get(IMGroupChangeMemberNotify::new)
        }
    }
}

impl ::protobuf::Clear for IMGroupChangeMemberNotify {
    fn clear(&mut self) {
        self.user_id = ::std::option::Option::None;
        self.change_type = ::std::option::Option::None;
        self.group_id = ::std::option::Option::None;
        self.cur_user_id_list.clear();
        self.chg_user_id_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMGroupChangeMemberNotify {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}
