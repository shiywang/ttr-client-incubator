// This file is generated by rust-protobuf 2.7.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `IM.SwitchService.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_7_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct IMP2PCmdMsg {
    // message fields
    from_user_id: ::std::option::Option<u32>,
    to_user_id: ::std::option::Option<u32>,
    cmd_msg_data: ::protobuf::SingularField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IMP2PCmdMsg {
    fn default() -> &'a IMP2PCmdMsg {
        <IMP2PCmdMsg as ::protobuf::Message>::default_instance()
    }
}

impl IMP2PCmdMsg {
    pub fn new() -> IMP2PCmdMsg {
        ::std::default::Default::default()
    }

    // required uint32 from_user_id = 1;


    pub fn get_from_user_id(&self) -> u32 {
        self.from_user_id.unwrap_or(0)
    }
    pub fn clear_from_user_id(&mut self) {
        self.from_user_id = ::std::option::Option::None;
    }

    pub fn has_from_user_id(&self) -> bool {
        self.from_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_from_user_id(&mut self, v: u32) {
        self.from_user_id = ::std::option::Option::Some(v);
    }

    // required uint32 to_user_id = 2;


    pub fn get_to_user_id(&self) -> u32 {
        self.to_user_id.unwrap_or(0)
    }
    pub fn clear_to_user_id(&mut self) {
        self.to_user_id = ::std::option::Option::None;
    }

    pub fn has_to_user_id(&self) -> bool {
        self.to_user_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_to_user_id(&mut self, v: u32) {
        self.to_user_id = ::std::option::Option::Some(v);
    }

    // required string cmd_msg_data = 3;


    pub fn get_cmd_msg_data(&self) -> &str {
        match self.cmd_msg_data.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_cmd_msg_data(&mut self) {
        self.cmd_msg_data.clear();
    }

    pub fn has_cmd_msg_data(&self) -> bool {
        self.cmd_msg_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_msg_data(&mut self, v: ::std::string::String) {
        self.cmd_msg_data = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cmd_msg_data(&mut self) -> &mut ::std::string::String {
        if self.cmd_msg_data.is_none() {
            self.cmd_msg_data.set_default();
        }
        self.cmd_msg_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_cmd_msg_data(&mut self) -> ::std::string::String {
        self.cmd_msg_data.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for IMP2PCmdMsg {
    fn is_initialized(&self) -> bool {
        if self.from_user_id.is_none() {
            return false;
        }
        if self.to_user_id.is_none() {
            return false;
        }
        if self.cmd_msg_data.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.from_user_id = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.to_user_id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.cmd_msg_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.from_user_id {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.to_user_id {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.cmd_msg_data.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.from_user_id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.to_user_id {
            os.write_uint32(2, v)?;
        }
        if let Some(ref v) = self.cmd_msg_data.as_ref() {
            os.write_string(3, &v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IMP2PCmdMsg {
        IMP2PCmdMsg::new()
    }

    fn default_instance() -> &'static IMP2PCmdMsg {
        static mut instance: ::protobuf::lazy::Lazy<IMP2PCmdMsg> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IMP2PCmdMsg,
        };
        unsafe {
            instance.get(IMP2PCmdMsg::new)
        }
    }
}

impl ::protobuf::Clear for IMP2PCmdMsg {
    fn clear(&mut self) {
        self.from_user_id = ::std::option::Option::None;
        self.to_user_id = ::std::option::Option::None;
        self.cmd_msg_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for IMP2PCmdMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}
